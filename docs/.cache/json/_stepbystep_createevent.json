{"data":{"site":{"siteMetadata":{"title":"Discordeno","docsLocation":"https://github.com/Skillz4Killz/Discordeno"}},"mdx":{"fields":{"id":"0be6de2f-771d-5d93-af14-f025d058ddc0","title":"Creating Events!","slug":"/stepbystep/createevent"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Creating Events!\",\n  \"metaTitle\": \"Creating An Event | Discordeno\",\n  \"metaDescription\": \"Let's create our very own bot with Discordeno!\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Woah! You are almost half way done with understanding all of Discordeno. Amazing isn't it? Something you may have noticed in the last section was when the bot started up you could see a bunch of messages like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Loaded X Commands\"), \" and such. Let's jump into this part now and understand how event handling works in Discordeno.\"), mdx(\"h2\", null, \"What Is An Event?\"), mdx(\"p\", null, \"An event in Discordeno is a function that can be called when a specific event occurs. For the most part, events will usually be the ones that are available from Discordeno. However, you can create your own custom events as well if you wish.\"), mdx(\"h2\", null, \"Understanding The Events\"), mdx(\"p\", null, \"Go ahead and open up the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/events/ready.ts\"), \" file. When you open this file, you will see the code that is triggered on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ready\"), \" event. Whenever the bot completely starts up, Discordeno emits the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ready\"), \" event. This is when this code will be run allowing you to log these messages.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import { botCache } from \\\"../../mod.ts\\\";\\nimport { cache } from \\\"https://raw.githubusercontent.com/Skillz4Killz/Discordeno/v7/src/utils/cache.ts\\\";\\nimport logger from \\\"https://raw.githubusercontent.com/Skillz4Killz/Discordeno/v7/src/utils/logger.ts\\\";\\n\\nbotCache.eventHandlers.ready = function () {\\n  logger.info(`Loaded ${botCache.arguments.size} Argument(s)`);\\n  logger.info(`Loaded ${botCache.commands.size} Command(s)`);\\n  logger.info(`Loaded ${Object.keys(botCache.eventHandlers).length} Event(s)`);\\n  logger.info(`Loaded ${botCache.inhibitors.size} Inhibitor(s)`);\\n  logger.info(`Loaded ${botCache.monitors.size} Monitor(s)`);\\n  logger.info(`Loaded ${botCache.tasks.size} Task(s)`);\\n\\n  logger.success(\\n    `[READY] Bot is online and ready in ${cache.guilds.size} guild(s)!`,\\n  );\\n};\\n\")), mdx(\"p\", null, \"Overall, this code is pretty self-explanatory. When the bot is ready, it logs all these things to the console for you.\"), mdx(\"h2\", null, \"Creating A Custom Event\"), mdx(\"p\", null, \"Make a new file in the events folder called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"discordLog.ts\"), \" that will send a message to a discord channel whenever we get an error so we don't need to always be watching the console to see errors. Once you made the file, go ahead and paste the base event snippet below.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import { botCache } from \\\"../../mod.ts\\\";\\n\\nbotCache.eventHandlers.eventname = function () {\\n  // Your code goes here\\n};\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Change the event name to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"discordLog\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Go to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"src/types/events.ts\"), \" and add in the following code so it looks like this:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"// This interface is a placeholder that allows you to easily add on custom events for your need.\\nexport interface CustomEvents extends EventHandlers {\\n  discordLog: () => unknown;\\n}\\n\")), mdx(\"p\", null, \"Awesome, now we can get started on adding the code.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import { botCache } from \\\"../../mod.ts\\\";\\nimport { Embed } from \\\"../utils/Embed.ts\\\";\\nimport { cache } from \\\"../../deps.ts\\\";\\nimport { configs } from \\\"../../configs.ts\\\";\\nimport { sendMessage } from \\\"https://raw.githubusercontent.com/Skillz4Killz/Discordeno/v7/src/handlers/channel.ts\\\";\\nimport { sendEmbed } from \\\"../utils/helpers.ts\\\";\\n\\nbotCache.eventHandlers.discordLog = function (error) {\\n  const embed = new Embed()\\n    .setDescription([\\n      \\\"```ts\\\",\\n      error,\\n      \\\"```\\\",\\n    ].join(\\\"\\\\n\\\"))\\n    .setTimestamp();\\n\\n  // Get the channel we need to send this error to\\n  const errorChannel = cache.channels.get(configs.channelIDs.errorChannelID);\\n  // If the channel is not found cancel out\\n  if (!errorChannel) return;\\n\\n  // Send the message\\n  return sendEmbed(errorChannel, embed);\\n};\\n\")), mdx(\"p\", null, \"Now that we have fully covered events, it would be a good time to get some practice here. Feel free to make more events that you would like in your bot. The following is a list of all the events available to you by the library at the time of writing this guide. There may be more or some may have been removed. I'll try to keep this updated but either way, VSC will let you know through autocompletion what is and isn't available.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"  botUpdate?: (user: UserPayload) => unknown;\\n  channelCreate?: (channel: Channel) => unknown;\\n  channelUpdate?: (channel: Channel, cachedChannel: Channel) => unknown;\\n  channelDelete?: (channel: Channel) => unknown;\\n  debug?: (args: DebugArg) => unknown;\\n  guildBanAdd?: (guild: Guild, user: Member | UserPayload) => unknown;\\n  guildBanRemove?: (guild: Guild, user: Member | UserPayload) => unknown;\\n  guildCreate?: (guild: Guild) => unknown;\\n  guildLoaded?: (guild: Guild) => unknown;\\n  guildUpdate?: (guild: Guild, changes: GuildUpdateChange[]) => unknown;\\n  guildDelete?: (guild: Guild) => unknown;\\n  guildEmojisUpdate?: (\\n    guild: Guild,\\n    emojis: Emoji[],\\n    cachedEmojis: Emoji[],\\n  ) => unknown;\\n  guildMemberAdd?: (guild: Guild, member: Member) => unknown;\\n  guildMemberRemove?: (guild: Guild, member: Member | UserPayload) => unknown;\\n  guildMemberUpdate?: (\\n    guild: Guild,\\n    member: Member,\\n    cachedMember?: Member,\\n  ) => unknown;\\n  heartbeat?: () => unknown;\\n  messageCreate?: (message: Message) => unknown;\\n  messageDelete?: (message: Message | PartialMessage) => unknown;\\n  messageUpdate?: (message: Message, cachedMessage: OldMessage) => unknown;\\n  nicknameUpdate?: (\\n    guild: Guild,\\n    member: Member,\\n    nickname: string,\\n    oldNickname?: string,\\n  ) => unknown;\\n  presenceUpdate?: (\\n    presence: PresenceUpdatePayload,\\n    oldPresence?: PresenceUpdatePayload,\\n  ) => unknown;\\n  raw?: (data: DiscordPayload) => unknown;\\n  rawGateway?: (data: unknown) => unknown;\\n  ready?: () => unknown;\\n  reactionAdd?: (\\n    message: Message | MessageReactionPayload,\\n    emoji: ReactionPayload,\\n    userID: string,\\n  ) => unknown;\\n  reactionRemove?: (\\n    message: Message | MessageReactionPayload,\\n    emoji: ReactionPayload,\\n    userID: string,\\n  ) => unknown;\\n  reactionRemoveAll?: (data: BaseMessageReactionPayload) => unknown;\\n  reactionRemoveEmoji?: (data: MessageReactionRemoveEmojiPayload) => unknown;\\n  roleCreate?: (guild: Guild, role: Role) => unknown;\\n  roleDelete?: (guild: Guild, role: Role) => unknown;\\n  roleUpdate?: (guild: Guild, role: Role, cachedRole: Role) => unknown;\\n  roleGained?: (guild: Guild, member: Member, roleID: string) => unknown;\\n  roleLost?: (guild: Guild, member: Member, roleID: string) => unknown;\\n  shardReady?: (shardID: number) => unknown;\\n  typingStart?: (data: TypingStartPayload) => unknown;\\n  voiceChannelJoin?: (member: Member, channelID: string) => unknown;\\n  voiceChannelLeave?: (member: Member, channelID: string) => unknown;\\n  voiceChannelSwitch?: (\\n    member: Member,\\n    channelID: string,\\n    oldChannelID: string,\\n  ) => unknown;\\n  voiceStateUpdate?: (\\n    member: Member,\\n    voiceState: VoiceStateUpdatePayload,\\n  ) => unknown;\\n  webhooksUpdate?: (channelID: string, guildID: string) => unknown;\\n\")), mdx(\"p\", null, \"Once, you are ready, let's jump into creating some command inhibitors.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#what-is-an-event","title":"What Is An Event?"},{"url":"#understanding-the-events","title":"Understanding The Events"},{"url":"#creating-a-custom-event","title":"Creating A Custom Event"}]},"parent":{"__typename":"File","relativePath":"stepbystep/createevent.md"},"frontmatter":{"metaTitle":"Creating An Event | Discordeno","metaDescription":"Let's create our very own bot with Discordeno!"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/faq","title":"FAQ"}}},{"node":{"fields":{"slug":"/","title":"Discordeno"}}},{"node":{"fields":{"slug":"/stepbystep","title":"Step By Step Guide"}}},{"node":{"fields":{"slug":"/gettingstarted","title":"Getting Started"}}},{"node":{"fields":{"slug":"/djs","title":"Discord.JS to Discordeno Guide"}}},{"node":{"fields":{"slug":"/stepbystep/createevent","title":"Creating Events!"}}},{"node":{"fields":{"slug":"/stepbystep/createmonitor","title":"Creating Monitors!"}}},{"node":{"fields":{"slug":"/stepbystep/createlanguage","title":"Creating Languages!"}}},{"node":{"fields":{"slug":"/introduction","title":"Introduction"}}},{"node":{"fields":{"slug":"/advanced/permlevels","title":"Permission Levels!"}}},{"node":{"fields":{"slug":"/advanced","title":"Advanced Guide"}}},{"node":{"fields":{"slug":"/stepbystep/createbot","title":"Creating The Bot!"}}},{"node":{"fields":{"slug":"/stepbystep/createinhibitor","title":"Creating Inhibitors!"}}},{"node":{"fields":{"slug":"/stepbystep/createcommand","title":"Creating A Command"}}}]}},"pageContext":{"id":"0be6de2f-771d-5d93-af14-f025d058ddc0"}}