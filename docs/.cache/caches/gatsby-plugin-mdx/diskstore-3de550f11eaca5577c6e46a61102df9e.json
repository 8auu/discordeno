{"expireTime":9007200851596121000,"key":"gatsby-plugin-mdx-entire-payload-e3ef98134b6bf11efcae7910dcec4e7c-","val":{"mdast":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"Understanding The Goals of This Guide","position":{"start":{"line":2,"column":4,"offset":4},"end":{"line":2,"column":41,"offset":41},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":41,"offset":41},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This guide is not intended to trash or hate on Discord.JS. In fact, Discord.JS is the most popular Node.JS library which is why most users wanting to use Discordeno come from Discord.JS. Today, I had a user ask me for a guide to convert a Discord.JS bot to Discordeno. That was the start of this guide.","position":{"start":{"line":4,"column":1,"offset":43},"end":{"line":4,"column":303,"offset":345},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":43},"end":{"line":4,"column":303,"offset":345},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Finding A Open Source Bot","position":{"start":{"line":6,"column":4,"offset":350},"end":{"line":6,"column":29,"offset":375},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":347},"end":{"line":6,"column":29,"offset":375},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For the purposes of this guide, I wanted to find a moderation bot that is totally open source to show an example of how to convert the bot to Discordeno. Trying to find one was not easy as most bot's were not using the latest Discord.JS version 12. Trying to find one that was using TypeScript made it even more difficult. My next best solution was to find a moderation bot that was recently updated(showing it is maintained or recently built). The best one I could find was ","position":{"start":{"line":8,"column":1,"offset":377},"end":{"line":8,"column":476,"offset":852},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/Nukestye/Zodiac","children":[{"type":"text","value":"Zodiac Bot","position":{"start":{"line":8,"column":477,"offset":853},"end":{"line":8,"column":487,"offset":863},"indent":[]}}],"position":{"start":{"line":8,"column":476,"offset":852},"end":{"line":8,"column":524,"offset":900},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":8,"column":524,"offset":900},"end":{"line":8,"column":525,"offset":901},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":377},"end":{"line":8,"column":525,"offset":901},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For the purposes of this guide, I will be using the current ","position":{"start":{"line":10,"column":1,"offset":903},"end":{"line":10,"column":61,"offset":963},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/Nukestye/Zodiac/tree/213891a38af1b7ecbd068b661ef9062ab58cc818","children":[{"type":"text","value":"latest commit","position":{"start":{"line":10,"column":62,"offset":964},"end":{"line":10,"column":75,"offset":977},"indent":[]}}],"position":{"start":{"line":10,"column":61,"offset":963},"end":{"line":10,"column":158,"offset":1060},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":903},"end":{"line":10,"column":158,"offset":1060},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Preparations","position":{"start":{"line":12,"column":4,"offset":1065},"end":{"line":12,"column":16,"offset":1077},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":1062},"end":{"line":12,"column":16,"offset":1077},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"First, create a Discordeno Bot using the ","position":{"start":{"line":14,"column":3,"offset":1081},"end":{"line":14,"column":44,"offset":1122},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/Skillz4Killz/Discordeno-bot-template","children":[{"type":"text","value":"Generator Boilerplate","position":{"start":{"line":14,"column":45,"offset":1123},"end":{"line":14,"column":66,"offset":1144},"indent":[]}}],"position":{"start":{"line":14,"column":44,"offset":1122},"end":{"line":14,"column":124,"offset":1202},"indent":[]}},{"type":"text","value":" I will name it Zodiac.","position":{"start":{"line":14,"column":124,"offset":1202},"end":{"line":14,"column":147,"offset":1225},"indent":[]}}],"position":{"start":{"line":14,"column":3,"offset":1081},"end":{"line":14,"column":147,"offset":1225},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":1079},"end":{"line":15,"column":1,"offset":1226},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Then ","position":{"start":{"line":16,"column":3,"offset":1229},"end":{"line":16,"column":8,"offset":1234},"indent":[]}},{"type":"inlineCode","value":"git clone https://github.com/Skillz4Killz/Zodiac.git","position":{"start":{"line":16,"column":8,"offset":1234},"end":{"line":16,"column":62,"offset":1288},"indent":[]}}],"position":{"start":{"line":16,"column":3,"offset":1229},"end":{"line":16,"column":62,"offset":1288},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":1227},"end":{"line":16,"column":62,"offset":1288},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":1079},"end":{"line":16,"column":62,"offset":1288},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now that I had the repository cloned, I could begin. Note that although the bot we are converting is built in JavaScript, I converted all code to TypeScript in this Guide as Discordeno is designed to be the best lib for TypeScript developers.","position":{"start":{"line":18,"column":1,"offset":1290},"end":{"line":18,"column":243,"offset":1532},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1290},"end":{"line":18,"column":243,"offset":1532},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Time to get started!","position":{"start":{"line":20,"column":1,"offset":1534},"end":{"line":20,"column":21,"offset":1554},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":1534},"end":{"line":20,"column":21,"offset":1554},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Converting main.js (index file)","position":{"start":{"line":22,"column":4,"offset":1559},"end":{"line":22,"column":35,"offset":1590},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":1556},"end":{"line":22,"column":35,"offset":1590},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The first thing is to convert the ","position":{"start":{"line":24,"column":1,"offset":1592},"end":{"line":24,"column":35,"offset":1626},"indent":[]}},{"type":"inlineCode","value":"main.js","position":{"start":{"line":24,"column":35,"offset":1626},"end":{"line":24,"column":44,"offset":1635},"indent":[]}},{"type":"text","value":" file which would be the app.js or index.js file. This is the file that is run to start your bot. In this case, the bot developer chose ","position":{"start":{"line":24,"column":44,"offset":1635},"end":{"line":24,"column":180,"offset":1771},"indent":[]}},{"type":"inlineCode","value":"main.js","position":{"start":{"line":24,"column":180,"offset":1771},"end":{"line":24,"column":189,"offset":1780},"indent":[]}},{"type":"text","value":". In Deno, the initial file is named ","position":{"start":{"line":24,"column":189,"offset":1780},"end":{"line":24,"column":226,"offset":1817},"indent":[]}},{"type":"inlineCode","value":"mod.ts","position":{"start":{"line":24,"column":226,"offset":1817},"end":{"line":24,"column":234,"offset":1825},"indent":[]}},{"type":"text","value":" so we can go ahead and opt for the Deno pattern. Note: there is already a ","position":{"start":{"line":24,"column":234,"offset":1825},"end":{"line":24,"column":309,"offset":1900},"indent":[]}},{"type":"inlineCode","value":"mod.ts","position":{"start":{"line":24,"column":309,"offset":1900},"end":{"line":24,"column":317,"offset":1908},"indent":[]}},{"type":"text","value":" file created and prebuilt entirely using the Generator.","position":{"start":{"line":24,"column":317,"offset":1908},"end":{"line":24,"column":373,"offset":1964},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":1592},"end":{"line":24,"column":373,"offset":1964},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Current Discord.JS Code:","position":{"start":{"line":26,"column":1,"offset":1966},"end":{"line":26,"column":25,"offset":1990},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":1966},"end":{"line":26,"column":25,"offset":1990},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"/* Keeping this to shoutout/credit the original author <3\n* @author: nukestye\n*/\n\nconst config = require('./config.json')\nconst fs = require('fs')\nconst log = console.log\n\n// Setting up the way to get commands\nconst { CommandoClient } = require('discord.js-commando')\nconst path = require('path')\n\n// reading events\nfs.readdir('./src/events/', (err, files) => {\n  if (err) return console.error(err)\n  files.forEach((file) => {\n    const eventFunction = require(`./src/events/${file}`)\n    if (eventFunction.disabled) return\n    const event = eventFunction.event || file.split('.')[0]\n    const emitter = (typeof eventFunction.emitter === 'string' ? client[eventFunction.emitter] : eventFunction.emitter) || client\n    const { once } = eventFunction\n    try {\n      emitter[once ? 'once' : 'on'](event, (...args) => eventFunction.run(...args))\n    } catch (error) {\n      console.error(error.stack)\n    }\n  })\n})\n\nconst client = global.client = new CommandoClient({\n  commandPrefix: `${config.prefix}`,\n  owner: `${config.owner}`,\n  invite: `${config.discord}`,\n  unknownCommandResponse: false\n})\n\n// Registing the commands\nclient.registry\n  .registerDefaultTypes()\n// The different fields for cmds\n  .registerGroups([\n    ['mod', 'Moderation Commands'],\n    ['public', 'Public Commands']\n  ])\n  .registerDefaultGroups()\n// Basic cmds can be disabled like {\"cmd: false\"}\n  .registerDefaultCommands()\n// commands in \"/src/commands\" will be counted\n  .registerCommandsIn(path.join(__dirname, '/src/commands'))\n\n// list of activities that the bot goes through\nconst activityArray = [`${config.prefix}help | `]\n// Bot lanuch code\nclient.once('ready', () => {\n  log(`Logged in as ${client.user.tag} in ${client.guilds.size} guild(s)!`)\n  setInterval(() => {\n    const index = Math.floor(Math.random() * (activityArray.length)) // generates a random number between 1 and the length of the activities array list\n    client.user.setActivity(\n      activityArray[index],\n      {\n        type: 'PLAYING'\n      }) // sets bot\"s activities to one of the phrases in the arraylist.\n  }, 5000) // updates every 10000ms = 10s\n})\n// If an error print it out\nclient.on('error', console.error)\n\n// Login in using the token in config\nclient.login(config.env.TOKEN)","position":{"start":{"line":27,"column":1,"offset":1991},"end":{"line":97,"column":4,"offset":4244},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Discordeno Version:","position":{"start":{"line":99,"column":1,"offset":4246},"end":{"line":99,"column":20,"offset":4265},"indent":[]}}],"position":{"start":{"line":99,"column":1,"offset":4246},"end":{"line":99,"column":20,"offset":4265},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"import Client, {\n  updateEventHandlers,\n} from \"https://raw.githubusercontent.com/Skillz4Killz/Discordeno/v7/src/module/client.ts\";\nimport { configs } from \"./configs.ts\";\nimport { Intents } from \"https://raw.githubusercontent.com/Skillz4Killz/Discordeno/v7/src/types/options.ts\";\nimport { eventHandlers } from \"./src/events/eventHandlers.ts\";\nimport { Message } from \"https://raw.githubusercontent.com/Skillz4Killz/Discordeno/v7/src/structures/message.ts\";\nimport { Command } from \"./src/types/commands.ts\";\nimport { Guild } from \"https://raw.githubusercontent.com/Skillz4Killz/Discordeno/v7/src/structures/guild.ts\";\n\nexport const botCache = {\n  commands: new Map<string, Command>(),\n  commandAliases: new Map<string, string>(),\n  guildPrefixes: new Map<string, string>(),\n  inhibitors: new Map<\n    string,\n    (message: Message, command: Command, guild?: Guild) => boolean\n\t>(),\n\teventHandlers: {} as EventHandlers\n};\n\nconst importDirectory = async (path: string) => {\n  const files = Deno.readDirSync(Deno.realPathSync(path));\n\n  for (const file of files) {\n    if (!file.name) continue;\n\n    const currentPath = `${path}/${file.name}`;\n    if (file.isFile) {\n      await import(currentPath);\n      continue;\n    }\n\n    importDirectory(currentPath);\n  }\n};\n\n// Forces deno to read all the files which will fill the commands/inhibitors cache etc.\nawait Promise.all(\n  [\"./src/commands\", \"./src/inhibitors\", \"./src/events\"].map((path) => importDirectory(path)),\n);\n\n\nClient({\n  token: configs.token,\n  // Pick the intents you wish to have for your bot.\n\tintents: [Intents.GUILDS, Intents.GUILD_MESSAGES],\n\teventHandlers: botCache.eventHandlers\n});","position":{"start":{"line":101,"column":1,"offset":4267},"end":{"line":151,"column":4,"offset":5927},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Something we haven't converted yet from the ","position":{"start":{"line":153,"column":1,"offset":5929},"end":{"line":153,"column":45,"offset":5973},"indent":[]}},{"type":"inlineCode","value":"main.js","position":{"start":{"line":153,"column":45,"offset":5973},"end":{"line":153,"column":54,"offset":5982},"indent":[]}},{"type":"text","value":" files is the event listeners. To do that, we will open up the events folder and find the corresponding event or create it if necessary. In this case, we have the ","position":{"start":{"line":153,"column":54,"offset":5982},"end":{"line":153,"column":217,"offset":6145},"indent":[]}},{"type":"inlineCode","value":"ready","position":{"start":{"line":153,"column":217,"offset":6145},"end":{"line":153,"column":224,"offset":6152},"indent":[]}},{"type":"text","value":" event and there is already a ","position":{"start":{"line":153,"column":224,"offset":6152},"end":{"line":153,"column":254,"offset":6182},"indent":[]}},{"type":"inlineCode","value":"ready.ts","position":{"start":{"line":153,"column":254,"offset":6182},"end":{"line":153,"column":264,"offset":6192},"indent":[]}},{"type":"text","value":" file. We can just use that.","position":{"start":{"line":153,"column":264,"offset":6192},"end":{"line":153,"column":292,"offset":6220},"indent":[]}}],"position":{"start":{"line":153,"column":1,"offset":5929},"end":{"line":153,"column":292,"offset":6220},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In our ","position":{"start":{"line":155,"column":1,"offset":6222},"end":{"line":155,"column":8,"offset":6229},"indent":[]}},{"type":"inlineCode","value":"ready.ts","position":{"start":{"line":155,"column":8,"offset":6229},"end":{"line":155,"column":18,"offset":6239},"indent":[]}},{"type":"text","value":" file we can add the ","position":{"start":{"line":155,"column":18,"offset":6239},"end":{"line":155,"column":39,"offset":6260},"indent":[]}},{"type":"inlineCode","value":"ready","position":{"start":{"line":155,"column":39,"offset":6260},"end":{"line":155,"column":46,"offset":6267},"indent":[]}},{"type":"text","value":" event listener.","position":{"start":{"line":155,"column":46,"offset":6267},"end":{"line":155,"column":62,"offset":6283},"indent":[]}}],"position":{"start":{"line":155,"column":1,"offset":6222},"end":{"line":155,"column":62,"offset":6283},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"import { botCache } from \"../../mod.ts\";\nimport { configs } from \"../../configs.ts\";\nimport { cache } from \"https://raw.githubusercontent.com/Skillz4Killz/Discordeno/v7/src/utils/cache.ts\";\nimport { editBotsStatus, chooseRandom } from \"https://raw.githubusercontent.com/Skillz4Killz/Discordeno/v7/src/utils/utils.ts\";\nimport { StatusType } from \"https://raw.githubusercontent.com/Skillz4Killz/Discordeno/v7/src/types/discord.ts\";\nimport { ActivityType } from \"https://raw.githubusercontent.com/Skillz4Killz/Discordeno/v7/src/types/activity.ts\";\n\nbotCache.eventHandlers.ready = function () {\n  console.log(`[READY] Bot is online and ready in ${cache.guilds.size} guild(s)!`);\n\n  // list of activities that the bot goes through\n  const activityArray = [`${configs.prefix}help | `];\n  setInterval(() => {\n    editBotsStatus(StatusType.Online, chooseRandom(activityArray), ActivityType.Game)\n  }, 5000)\n};","position":{"start":{"line":157,"column":1,"offset":6285},"end":{"line":174,"column":4,"offset":7196},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To understand this code, we are setting a function to be run when the bot is ","position":{"start":{"line":176,"column":1,"offset":7198},"end":{"line":176,"column":78,"offset":7275},"indent":[]}},{"type":"inlineCode","value":"ready","position":{"start":{"line":176,"column":78,"offset":7275},"end":{"line":176,"column":85,"offset":7282},"indent":[]}},{"type":"text","value":". Then the bot will edit the bots status every 5 seconds. Notice, that Discordeno provides a nice clean util function to choose a random item from an array. You also have beautiful enums provided that prevent you from making any typos/mistakes.","position":{"start":{"line":176,"column":85,"offset":7282},"end":{"line":176,"column":329,"offset":7526},"indent":[]}}],"position":{"start":{"line":176,"column":1,"offset":7198},"end":{"line":176,"column":329,"offset":7526},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"We have now converted the entire ","position":{"start":{"line":178,"column":1,"offset":7528},"end":{"line":178,"column":34,"offset":7561},"indent":[]}},{"type":"inlineCode","value":"main.js","position":{"start":{"line":178,"column":34,"offset":7561},"end":{"line":178,"column":43,"offset":7570},"indent":[]}},{"type":"text","value":" file, in a matter of seconds. The Discordeno official generator took care of the majority of workload and we just modified the ","position":{"start":{"line":178,"column":43,"offset":7570},"end":{"line":178,"column":171,"offset":7698},"indent":[]}},{"type":"inlineCode","value":"ready.ts","position":{"start":{"line":178,"column":171,"offset":7698},"end":{"line":178,"column":181,"offset":7708},"indent":[]}},{"type":"text","value":" file.","position":{"start":{"line":178,"column":181,"offset":7708},"end":{"line":178,"column":187,"offset":7714},"indent":[]}}],"position":{"start":{"line":178,"column":1,"offset":7528},"end":{"line":178,"column":187,"offset":7714},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"Note:","position":{"start":{"line":180,"column":1,"offset":7716},"end":{"line":180,"column":8,"offset":7723},"indent":[]}},{"type":"text","value":" I did remove some generally well known \"bad practices\" such as global vars and such. Overall, you will see the functionality of the project will not change as we progress through this guide.","position":{"start":{"line":180,"column":8,"offset":7723},"end":{"line":180,"column":199,"offset":7914},"indent":[]}}],"position":{"start":{"line":180,"column":1,"offset":7716},"end":{"line":180,"column":199,"offset":7914},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Converting Commands","position":{"start":{"line":182,"column":4,"offset":7919},"end":{"line":182,"column":23,"offset":7938},"indent":[]}}],"position":{"start":{"line":182,"column":1,"offset":7916},"end":{"line":182,"column":23,"offset":7938},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The first command in the commands folder is the ","position":{"start":{"line":184,"column":1,"offset":7940},"end":{"line":184,"column":49,"offset":7988},"indent":[]}},{"type":"inlineCode","value":"addRole","position":{"start":{"line":184,"column":49,"offset":7988},"end":{"line":184,"column":58,"offset":7997},"indent":[]}},{"type":"text","value":" command.","position":{"start":{"line":184,"column":58,"offset":7997},"end":{"line":184,"column":67,"offset":8006},"indent":[]}}],"position":{"start":{"line":184,"column":1,"offset":7940},"end":{"line":184,"column":67,"offset":8006},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This  is the code from the bot:","position":{"start":{"line":186,"column":1,"offset":8008},"end":{"line":186,"column":32,"offset":8039},"indent":[]}}],"position":{"start":{"line":186,"column":1,"offset":8008},"end":{"line":186,"column":32,"offset":8039},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"// Getting the 'Command' features from Commando\nconst { Command } = require('discord.js-commando')\n\n// Code for the command\nmodule.exports = class addRoleCommand extends Command {\n  constructor (client) {\n    super(client, {\n      // name of the command, must be in lowercase\n      name: 'addrole',\n      // other ways to call the command, must be in lowercase\n      aliases: ['role'],\n      // command group its part of\n      group: 'mod',\n      // name within the command group, must be in lowercase\n      memberName: 'addrole',\n      // Is the description used for 'help' command\n      description: 'Adds mentioned role to mentioned user.',\n      // Prevents it from being used in dms\n      guildOnly: true,\n      // Permissions, list found here > `discord.js.org/#/docs/main/11.5.1/class/Permissions?scrollTo=s-FLAGS`\n      clientPermissions: ['ADMINISTRATOR', 'MANAGE_ROLES'],\n      userPermissions: ['MANAGE_ROLES'],\n      // Prevents anyone other than owner to use the command\n      ownerOnly: false\n    })\n  }\n\n  // Run code goes here\n  run (message) {\n    const user = message.mentions.members.first()\n    const roleToAdd = message.mentions.roles.first()\n\n    // checking to see if the user has the role or not\n    if (!(user.roles.find(r => r.name === roleToAdd.name))) {\n      user.addRole(roleToAdd)\n      message.channel.send(`${user} has been given the role: ${roleToAdd.name}`)\n        .then(msg => {\n          msg.delete(5000)\n        })\n    } else {\n      message.channel.send(`${user} already has the role: ${roleToAdd.name}`)\n    }\n\n    // console.error(user, roleToAdd, message.member.roles.find(r => r.name === roleToAdd));\n  }\n}","position":{"start":{"line":187,"column":1,"offset":8040},"end":{"line":234,"column":4,"offset":9700},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This is how to do it with Discordeno:","position":{"start":{"line":236,"column":1,"offset":9702},"end":{"line":236,"column":38,"offset":9739},"indent":[]}}],"position":{"start":{"line":236,"column":1,"offset":9702},"end":{"line":236,"column":38,"offset":9739},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"import { botCache } from \"../../mod.ts\";\nimport { addRole } from \"https://raw.githubusercontent.com/Skillz4Killz/Discordeno/v7/src/handlers/member.ts\";\nimport { sendAlertResponse, sendResponse } from \"../utils/helpers.ts\";\n\nbotCache.commands.set(`addrole`, {\n  // Is the description used for 'help' command\n  description: \"Adds mentioned role to mentioned user.\",\n  // Prevents it from being used in dms\n  guildOnly: true,\n  botServerPermissions: [\"ADMINISTRATOR\", \"MANAGE_ROLES\"],\n  userServerPermissions: [\"MANAGE_ROLES\"],\n  execute: (message, _args, guild) => {\n    const [member] = message.mentions();\n    const [roleIDToAdd] = message.mentionRoles;\n\t\tconst role = guild?.roles.get(roleIDToAdd)\n\n    // checking to see if the user has the role or not\n    if (!member.roles.includes(roleIDToAdd)) {\n\t\t\taddRole(guild!, member.user.id, roleIDToAdd)\n\t\t\tsendAlertResponse(message, `has been given the role: ${role!.name}`, 5);\n    } else {\n\t\t\tsendResponse(message, `already has the role: ${role!.name}`)\n    }\n  }\n});\n\n// other ways to call the command\ncreateCommandAliases(\"role\", \"addrole\");","position":{"start":{"line":237,"column":1,"offset":9740},"end":{"line":266,"column":4,"offset":10842},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Awesome, that is a full command converted from Discord.JS to Discordeno. See how easy it is! Let's convert one more command to see how to really take full advantage of Discordeno boilerplate and have something amazing.","position":{"start":{"line":268,"column":1,"offset":10844},"end":{"line":268,"column":219,"offset":11062},"indent":[]}}],"position":{"start":{"line":268,"column":1,"offset":10844},"end":{"line":268,"column":219,"offset":11062},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Discord.JS Kick Command Version","position":{"start":{"line":270,"column":1,"offset":11064},"end":{"line":270,"column":32,"offset":11095},"indent":[]}}],"position":{"start":{"line":270,"column":1,"offset":11064},"end":{"line":270,"column":32,"offset":11095},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"// Getting the 'Command' features from Commando\nconst { Command } = require('discord.js-commando')\nconst { RichEmbed } = require('discord.js')\nconst chalk = require('chalk')\nconst log = console.log\n\n// Code for the command\nmodule.exports = class kickCommand extends Command {\n  constructor (client) {\n    super(client, {\n      // name of the command, must be in lowercase\n      name: 'kick',\n      // other ways to call the command, must be in lowercase\n      aliases: ['boot', 'tempban'],\n      // command group its part of\n      group: 'mod',\n      // name within the command group, must be in lowercase\n      memberName: 'kick',\n      // Is the description used for 'help' command\n      description: 'Kick command.',\n      // adds cooldowns to the command\n      throttling: {\n        // usages in certain time x\n        usages: 1,\n        // the cooldown\n        duration: 10\n      },\n      // Prevents it from being used in dms\n      guildOnly: true,\n      // Permissions, list found here > `discord.js.org/#/docs/main/11.5.1/class/Permissions?scrollTo=s-FLAGS`\n      clientPermissions: ['ADMINISTRATOR'],\n      userPermissions: ['KICK_MEMBERS'],\n      // Prevents anyone other than owner to use the command\n      ownerOnly: false\n\n    })\n  }\n\n  // Run code goes here\n  run (message) {\n    const messageArry = message.content.split(' ')\n    const args = messageArry.slice(1)\n\n    const kUser = message.guild.member(message.mentions.users.first() || message.guild.get(args[0]))\n    if (!kUser) return message.channel.send('User cannot be found!')\n    const kreason = args.join(' ').slice(22)\n\n    // setting up the embed for report/log\n    const kickEmbed = new RichEmbed()\n      .setDescription(`Report: ${kUser} Kick`)\n      .addField('Reason >', `${kreason}`)\n      .addField('Time', message.createdAt)\n\n    const reportchannel = message.guild.channels.find('name', 'report')\n    if (!reportchannel) return message.channel.send('*`Report channel cannot be found!`*')\n\n    // Delete the message command\n    // eslint-disable-next-line camelcase\n    message.delete().catch(O_o => {})\n    // Kick the user with reason\n    message.guild.member(kUser).kick(kreason)\n    // sends the kick report into log/report\n    reportchannel.send(kickEmbed)\n    // Logs the kick into the terminal\n    log(chalk.red('KICK', chalk.underline.bgBlue(kUser) + '!'))\n  }\n}","position":{"start":{"line":271,"column":1,"offset":11096},"end":{"line":339,"column":4,"offset":13460},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Discordeno Version","position":{"start":{"line":341,"column":1,"offset":13462},"end":{"line":341,"column":19,"offset":13480},"indent":[]}}],"position":{"start":{"line":341,"column":1,"offset":13462},"end":{"line":341,"column":19,"offset":13480},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"import { sendMessage } from \"https://raw.githubusercontent.com/Skillz4Killz/Discordeno/v7/src/handlers/channel.ts\";\nimport { Member } from \"https://raw.githubusercontent.com/Skillz4Killz/Discordeno/v7/src/structures/member.ts\";\nimport { kick } from \"https://raw.githubusercontent.com/Skillz4Killz/Discordeno/v7/src/handlers/member.ts\";\nimport { deleteMessage } from \"https://raw.githubusercontent.com/Skillz4Killz/Discordeno/v7/src/handlers/message.ts\";\nimport { botCache } from \"../../mod.ts\";\nimport { createCommandAliases, sendResponse } from \"../utils/helpers.ts\";\nimport { Embed } from \"../utils/Embed.ts\";\nimport { Args } from \"../types/commands.ts\";\n\nbotCache.commands.set(`kick`, {\n  name: `kick`,\n  description: \"Kick command.\",\n  // adds cooldowns to the command\n  cooldown: {\n    // usages in certain duration of seconds below\n    allowedUses: 1,\n    // the cooldown\n    seconds: 10,\n  },\n  // Prevents it from being used in dms\n  guildOnly: true,\n  botServerPermissions: [\"ADMINISTRATOR\"],\n  userServerPermissions: [\"KICK_MEMBERS\"],\n  arguments: [\n    {\n      name: \"member\",\n      type: \"member\",\n      missing: function (message) {\n        sendResponse(message, `User cannot be found.`);\n      },\n      // By default this is true but for the purpose of the guide so you can see this exists.\n      required: true,\n    },\n    {\n      name: \"reason\",\n      // The leftover string provided by the user that was not used by previous args.\n      type: \"...string\",\n      defaultValue: \"No reason provided.\",\n      // It is silly to lowercase this but for the purpose of the guide you can see that this is also available to you.\n      lowercase: true,\n    },\n  ],\n  execute: function (message, args: KickArgs, guild) {\n    if (!guild) return;\n    // setting up the embed for report/log\n    const embed = new Embed()\n      .setDescription(`Report: ${args.member.mention} Kick`)\n      .addField(\"Reason >\", args.reason)\n      .addField(\"Time\", message.timestamp.toString());\n\n    const reportchannel = guild.channels.find((channel) =>\n      channel.name === \"report\"\n    );\n    if (!reportchannel) {\n      return sendResponse(message, \"*`Report channel cannot be found!`*\");\n    }\n\n    // Delete the message command\n    deleteMessage(message, \"Remove kick command trigger.\");\n    // Kick the user with reason\n    kick(guild, args.member.user.id, args.reason);\n    // sends the kick report into log/report\n    sendMessage(reportchannel, embed);\n  },\n});\n\n// other ways to call the command, must be in lowercase\ncreateCommandAliases(\"kick\", [\"boot\", \"tempban\"]);\n\ninterface KickArgs {\n  member: Member;\n  reason: string;\n}","position":{"start":{"line":342,"column":1,"offset":13481},"end":{"line":416,"column":4,"offset":16116},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Let's take a minute and explain the differences here. The first thing you will probably notice is different is the ","position":{"start":{"line":418,"column":1,"offset":16118},"end":{"line":418,"column":116,"offset":16233},"indent":[]}},{"type":"inlineCode","value":"arguments","position":{"start":{"line":418,"column":116,"offset":16233},"end":{"line":418,"column":127,"offset":16244},"indent":[]}},{"type":"text","value":" property. Discordeno provides the ","position":{"start":{"line":418,"column":127,"offset":16244},"end":{"line":418,"column":162,"offset":16279},"indent":[]}},{"type":"inlineCode","value":"arguments","position":{"start":{"line":418,"column":162,"offset":16279},"end":{"line":418,"column":173,"offset":16290},"indent":[]}},{"type":"text","value":" property because it provides argument handling/parsing/validating internally. You don't need to be splitting the message content or going through and validating it yourself. All you do is tell Discordeno that you want a member and a reason. It will do the magic and hard work to get you that data before you even run the command. You just do ","position":{"start":{"line":418,"column":173,"offset":16290},"end":{"line":418,"column":516,"offset":16633},"indent":[]}},{"type":"inlineCode","value":"args.member","position":{"start":{"line":418,"column":516,"offset":16633},"end":{"line":418,"column":529,"offset":16646},"indent":[]}},{"type":"text","value":" and you have access to the full member object. You can also see that aliases are created slightly different but it's not that huge a impact. The end functionality is the same. There are a lot more powerful aspects to Discordeno like arguments. Keep diving in and you will find all the wonderful tools available to give you the best developer experience possible.","position":{"start":{"line":418,"column":529,"offset":16646},"end":{"line":418,"column":892,"offset":17009},"indent":[]}}],"position":{"start":{"line":418,"column":1,"offset":16118},"end":{"line":418,"column":892,"offset":17009},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Need More Examples/Help","position":{"start":{"line":420,"column":5,"offset":17015},"end":{"line":420,"column":28,"offset":17038},"indent":[]}}],"position":{"start":{"line":420,"column":1,"offset":17011},"end":{"line":420,"column":28,"offset":17038},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you still need more help converting other aspects of your bot please contact me at ","position":{"start":{"line":422,"column":1,"offset":17040},"end":{"line":422,"column":87,"offset":17126},"indent":[]}},{"type":"link","title":null,"url":"https://discord.gg/J4NqJ72","children":[{"type":"text","value":"Discord","position":{"start":{"line":422,"column":88,"offset":17127},"end":{"line":422,"column":95,"offset":17134},"indent":[]}}],"position":{"start":{"line":422,"column":87,"offset":17126},"end":{"line":422,"column":124,"offset":17163},"indent":[]}},{"type":"text","value":". I will continue adding more examples to this guide as more people request them.","position":{"start":{"line":422,"column":124,"offset":17163},"end":{"line":422,"column":205,"offset":17244},"indent":[]}}],"position":{"start":{"line":422,"column":1,"offset":17040},"end":{"line":422,"column":205,"offset":17244},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Discord.JS to Discordeno Guide\",\"metaTitle\":\"Discord.JS to Discordeno | Discordeno\",\"metaDescription\":\"This guide will help should you how to convert a Discord.JS bot over to Discordeno.\"}","position":{"start":{"line":425,"column":1,"offset":17247},"end":{"line":425,"column":227,"offset":17473},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":425,"column":227,"offset":17473}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Discord.JS to Discordeno Guide\",\n  \"metaTitle\": \"Discord.JS to Discordeno | Discordeno\",\n  \"metaDescription\": \"This guide will help should you how to convert a Discord.JS bot over to Discordeno.\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Understanding The Goals of This Guide\"), mdx(\"p\", null, \"This guide is not intended to trash or hate on Discord.JS. In fact, Discord.JS is the most popular Node.JS library which is why most users wanting to use Discordeno come from Discord.JS. Today, I had a user ask me for a guide to convert a Discord.JS bot to Discordeno. That was the start of this guide.\"), mdx(\"h2\", null, \"Finding A Open Source Bot\"), mdx(\"p\", null, \"For the purposes of this guide, I wanted to find a moderation bot that is totally open source to show an example of how to convert the bot to Discordeno. Trying to find one was not easy as most bot's were not using the latest Discord.JS version 12. Trying to find one that was using TypeScript made it even more difficult. My next best solution was to find a moderation bot that was recently updated(showing it is maintained or recently built). The best one I could find was \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Nukestye/Zodiac\"\n  }), \"Zodiac Bot\"), \".\"), mdx(\"p\", null, \"For the purposes of this guide, I will be using the current \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Nukestye/Zodiac/tree/213891a38af1b7ecbd068b661ef9062ab58cc818\"\n  }), \"latest commit\")), mdx(\"h2\", null, \"Preparations\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"First, create a Discordeno Bot using the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Skillz4Killz/Discordeno-bot-template\"\n  }), \"Generator Boilerplate\"), \" I will name it Zodiac.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Then \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git clone https://github.com/Skillz4Killz/Zodiac.git\")))), mdx(\"p\", null, \"Now that I had the repository cloned, I could begin. Note that although the bot we are converting is built in JavaScript, I converted all code to TypeScript in this Guide as Discordeno is designed to be the best lib for TypeScript developers.\"), mdx(\"p\", null, \"Time to get started!\"), mdx(\"h2\", null, \"Converting main.js (index file)\"), mdx(\"p\", null, \"The first thing is to convert the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"main.js\"), \" file which would be the app.js or index.js file. This is the file that is run to start your bot. In this case, the bot developer chose \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"main.js\"), \". In Deno, the initial file is named \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mod.ts\"), \" so we can go ahead and opt for the Deno pattern. Note: there is already a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mod.ts\"), \" file created and prebuilt entirely using the Generator.\"), mdx(\"p\", null, \"Current Discord.JS Code:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"/* Keeping this to shoutout/credit the original author <3\\n* @author: nukestye\\n*/\\n\\nconst config = require('./config.json')\\nconst fs = require('fs')\\nconst log = console.log\\n\\n// Setting up the way to get commands\\nconst { CommandoClient } = require('discord.js-commando')\\nconst path = require('path')\\n\\n// reading events\\nfs.readdir('./src/events/', (err, files) => {\\n  if (err) return console.error(err)\\n  files.forEach((file) => {\\n    const eventFunction = require(`./src/events/${file}`)\\n    if (eventFunction.disabled) return\\n    const event = eventFunction.event || file.split('.')[0]\\n    const emitter = (typeof eventFunction.emitter === 'string' ? client[eventFunction.emitter] : eventFunction.emitter) || client\\n    const { once } = eventFunction\\n    try {\\n      emitter[once ? 'once' : 'on'](event, (...args) => eventFunction.run(...args))\\n    } catch (error) {\\n      console.error(error.stack)\\n    }\\n  })\\n})\\n\\nconst client = global.client = new CommandoClient({\\n  commandPrefix: `${config.prefix}`,\\n  owner: `${config.owner}`,\\n  invite: `${config.discord}`,\\n  unknownCommandResponse: false\\n})\\n\\n// Registing the commands\\nclient.registry\\n  .registerDefaultTypes()\\n// The different fields for cmds\\n  .registerGroups([\\n    ['mod', 'Moderation Commands'],\\n    ['public', 'Public Commands']\\n  ])\\n  .registerDefaultGroups()\\n// Basic cmds can be disabled like {\\\"cmd: false\\\"}\\n  .registerDefaultCommands()\\n// commands in \\\"/src/commands\\\" will be counted\\n  .registerCommandsIn(path.join(__dirname, '/src/commands'))\\n\\n// list of activities that the bot goes through\\nconst activityArray = [`${config.prefix}help | `]\\n// Bot lanuch code\\nclient.once('ready', () => {\\n  log(`Logged in as ${client.user.tag} in ${client.guilds.size} guild(s)!`)\\n  setInterval(() => {\\n    const index = Math.floor(Math.random() * (activityArray.length)) // generates a random number between 1 and the length of the activities array list\\n    client.user.setActivity(\\n      activityArray[index],\\n      {\\n        type: 'PLAYING'\\n      }) // sets bot\\\"s activities to one of the phrases in the arraylist.\\n  }, 5000) // updates every 10000ms = 10s\\n})\\n// If an error print it out\\nclient.on('error', console.error)\\n\\n// Login in using the token in config\\nclient.login(config.env.TOKEN)\\n\")), mdx(\"p\", null, \"Discordeno Version:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import Client, {\\n  updateEventHandlers,\\n} from \\\"https://raw.githubusercontent.com/Skillz4Killz/Discordeno/v7/src/module/client.ts\\\";\\nimport { configs } from \\\"./configs.ts\\\";\\nimport { Intents } from \\\"https://raw.githubusercontent.com/Skillz4Killz/Discordeno/v7/src/types/options.ts\\\";\\nimport { eventHandlers } from \\\"./src/events/eventHandlers.ts\\\";\\nimport { Message } from \\\"https://raw.githubusercontent.com/Skillz4Killz/Discordeno/v7/src/structures/message.ts\\\";\\nimport { Command } from \\\"./src/types/commands.ts\\\";\\nimport { Guild } from \\\"https://raw.githubusercontent.com/Skillz4Killz/Discordeno/v7/src/structures/guild.ts\\\";\\n\\nexport const botCache = {\\n  commands: new Map<string, Command>(),\\n  commandAliases: new Map<string, string>(),\\n  guildPrefixes: new Map<string, string>(),\\n  inhibitors: new Map<\\n    string,\\n    (message: Message, command: Command, guild?: Guild) => boolean\\n    >(),\\n    eventHandlers: {} as EventHandlers\\n};\\n\\nconst importDirectory = async (path: string) => {\\n  const files = Deno.readDirSync(Deno.realPathSync(path));\\n\\n  for (const file of files) {\\n    if (!file.name) continue;\\n\\n    const currentPath = `${path}/${file.name}`;\\n    if (file.isFile) {\\n      await import(currentPath);\\n      continue;\\n    }\\n\\n    importDirectory(currentPath);\\n  }\\n};\\n\\n// Forces deno to read all the files which will fill the commands/inhibitors cache etc.\\nawait Promise.all(\\n  [\\\"./src/commands\\\", \\\"./src/inhibitors\\\", \\\"./src/events\\\"].map((path) => importDirectory(path)),\\n);\\n\\n\\nClient({\\n  token: configs.token,\\n  // Pick the intents you wish to have for your bot.\\n    intents: [Intents.GUILDS, Intents.GUILD_MESSAGES],\\n    eventHandlers: botCache.eventHandlers\\n});\\n\")), mdx(\"p\", null, \"Something we haven't converted yet from the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"main.js\"), \" files is the event listeners. To do that, we will open up the events folder and find the corresponding event or create it if necessary. In this case, we have the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ready\"), \" event and there is already a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ready.ts\"), \" file. We can just use that.\"), mdx(\"p\", null, \"In our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ready.ts\"), \" file we can add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ready\"), \" event listener.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import { botCache } from \\\"../../mod.ts\\\";\\nimport { configs } from \\\"../../configs.ts\\\";\\nimport { cache } from \\\"https://raw.githubusercontent.com/Skillz4Killz/Discordeno/v7/src/utils/cache.ts\\\";\\nimport { editBotsStatus, chooseRandom } from \\\"https://raw.githubusercontent.com/Skillz4Killz/Discordeno/v7/src/utils/utils.ts\\\";\\nimport { StatusType } from \\\"https://raw.githubusercontent.com/Skillz4Killz/Discordeno/v7/src/types/discord.ts\\\";\\nimport { ActivityType } from \\\"https://raw.githubusercontent.com/Skillz4Killz/Discordeno/v7/src/types/activity.ts\\\";\\n\\nbotCache.eventHandlers.ready = function () {\\n  console.log(`[READY] Bot is online and ready in ${cache.guilds.size} guild(s)!`);\\n\\n  // list of activities that the bot goes through\\n  const activityArray = [`${configs.prefix}help | `];\\n  setInterval(() => {\\n    editBotsStatus(StatusType.Online, chooseRandom(activityArray), ActivityType.Game)\\n  }, 5000)\\n};\\n\")), mdx(\"p\", null, \"To understand this code, we are setting a function to be run when the bot is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ready\"), \". Then the bot will edit the bots status every 5 seconds. Notice, that Discordeno provides a nice clean util function to choose a random item from an array. You also have beautiful enums provided that prevent you from making any typos/mistakes.\"), mdx(\"p\", null, \"We have now converted the entire \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"main.js\"), \" file, in a matter of seconds. The Discordeno official generator took care of the majority of workload and we just modified the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ready.ts\"), \" file.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" I did remove some generally well known \\\"bad practices\\\" such as global vars and such. Overall, you will see the functionality of the project will not change as we progress through this guide.\"), mdx(\"h2\", null, \"Converting Commands\"), mdx(\"p\", null, \"The first command in the commands folder is the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"addRole\"), \" command.\"), mdx(\"p\", null, \"This  is the code from the bot:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"// Getting the 'Command' features from Commando\\nconst { Command } = require('discord.js-commando')\\n\\n// Code for the command\\nmodule.exports = class addRoleCommand extends Command {\\n  constructor (client) {\\n    super(client, {\\n      // name of the command, must be in lowercase\\n      name: 'addrole',\\n      // other ways to call the command, must be in lowercase\\n      aliases: ['role'],\\n      // command group its part of\\n      group: 'mod',\\n      // name within the command group, must be in lowercase\\n      memberName: 'addrole',\\n      // Is the description used for 'help' command\\n      description: 'Adds mentioned role to mentioned user.',\\n      // Prevents it from being used in dms\\n      guildOnly: true,\\n      // Permissions, list found here > `discord.js.org/#/docs/main/11.5.1/class/Permissions?scrollTo=s-FLAGS`\\n      clientPermissions: ['ADMINISTRATOR', 'MANAGE_ROLES'],\\n      userPermissions: ['MANAGE_ROLES'],\\n      // Prevents anyone other than owner to use the command\\n      ownerOnly: false\\n    })\\n  }\\n\\n  // Run code goes here\\n  run (message) {\\n    const user = message.mentions.members.first()\\n    const roleToAdd = message.mentions.roles.first()\\n\\n    // checking to see if the user has the role or not\\n    if (!(user.roles.find(r => r.name === roleToAdd.name))) {\\n      user.addRole(roleToAdd)\\n      message.channel.send(`${user} has been given the role: ${roleToAdd.name}`)\\n        .then(msg => {\\n          msg.delete(5000)\\n        })\\n    } else {\\n      message.channel.send(`${user} already has the role: ${roleToAdd.name}`)\\n    }\\n\\n    // console.error(user, roleToAdd, message.member.roles.find(r => r.name === roleToAdd));\\n  }\\n}\\n\")), mdx(\"p\", null, \"This is how to do it with Discordeno:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import { botCache } from \\\"../../mod.ts\\\";\\nimport { addRole } from \\\"https://raw.githubusercontent.com/Skillz4Killz/Discordeno/v7/src/handlers/member.ts\\\";\\nimport { sendAlertResponse, sendResponse } from \\\"../utils/helpers.ts\\\";\\n\\nbotCache.commands.set(`addrole`, {\\n  // Is the description used for 'help' command\\n  description: \\\"Adds mentioned role to mentioned user.\\\",\\n  // Prevents it from being used in dms\\n  guildOnly: true,\\n  botServerPermissions: [\\\"ADMINISTRATOR\\\", \\\"MANAGE_ROLES\\\"],\\n  userServerPermissions: [\\\"MANAGE_ROLES\\\"],\\n  execute: (message, _args, guild) => {\\n    const [member] = message.mentions();\\n    const [roleIDToAdd] = message.mentionRoles;\\n        const role = guild?.roles.get(roleIDToAdd)\\n\\n    // checking to see if the user has the role or not\\n    if (!member.roles.includes(roleIDToAdd)) {\\n            addRole(guild!, member.user.id, roleIDToAdd)\\n            sendAlertResponse(message, `has been given the role: ${role!.name}`, 5);\\n    } else {\\n            sendResponse(message, `already has the role: ${role!.name}`)\\n    }\\n  }\\n});\\n\\n// other ways to call the command\\ncreateCommandAliases(\\\"role\\\", \\\"addrole\\\");\\n\")), mdx(\"p\", null, \"Awesome, that is a full command converted from Discord.JS to Discordeno. See how easy it is! Let's convert one more command to see how to really take full advantage of Discordeno boilerplate and have something amazing.\"), mdx(\"p\", null, \"Discord.JS Kick Command Version\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"// Getting the 'Command' features from Commando\\nconst { Command } = require('discord.js-commando')\\nconst { RichEmbed } = require('discord.js')\\nconst chalk = require('chalk')\\nconst log = console.log\\n\\n// Code for the command\\nmodule.exports = class kickCommand extends Command {\\n  constructor (client) {\\n    super(client, {\\n      // name of the command, must be in lowercase\\n      name: 'kick',\\n      // other ways to call the command, must be in lowercase\\n      aliases: ['boot', 'tempban'],\\n      // command group its part of\\n      group: 'mod',\\n      // name within the command group, must be in lowercase\\n      memberName: 'kick',\\n      // Is the description used for 'help' command\\n      description: 'Kick command.',\\n      // adds cooldowns to the command\\n      throttling: {\\n        // usages in certain time x\\n        usages: 1,\\n        // the cooldown\\n        duration: 10\\n      },\\n      // Prevents it from being used in dms\\n      guildOnly: true,\\n      // Permissions, list found here > `discord.js.org/#/docs/main/11.5.1/class/Permissions?scrollTo=s-FLAGS`\\n      clientPermissions: ['ADMINISTRATOR'],\\n      userPermissions: ['KICK_MEMBERS'],\\n      // Prevents anyone other than owner to use the command\\n      ownerOnly: false\\n\\n    })\\n  }\\n\\n  // Run code goes here\\n  run (message) {\\n    const messageArry = message.content.split(' ')\\n    const args = messageArry.slice(1)\\n\\n    const kUser = message.guild.member(message.mentions.users.first() || message.guild.get(args[0]))\\n    if (!kUser) return message.channel.send('User cannot be found!')\\n    const kreason = args.join(' ').slice(22)\\n\\n    // setting up the embed for report/log\\n    const kickEmbed = new RichEmbed()\\n      .setDescription(`Report: ${kUser} Kick`)\\n      .addField('Reason >', `${kreason}`)\\n      .addField('Time', message.createdAt)\\n\\n    const reportchannel = message.guild.channels.find('name', 'report')\\n    if (!reportchannel) return message.channel.send('*`Report channel cannot be found!`*')\\n\\n    // Delete the message command\\n    // eslint-disable-next-line camelcase\\n    message.delete().catch(O_o => {})\\n    // Kick the user with reason\\n    message.guild.member(kUser).kick(kreason)\\n    // sends the kick report into log/report\\n    reportchannel.send(kickEmbed)\\n    // Logs the kick into the terminal\\n    log(chalk.red('KICK', chalk.underline.bgBlue(kUser) + '!'))\\n  }\\n}\\n\")), mdx(\"p\", null, \"Discordeno Version\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import { sendMessage } from \\\"https://raw.githubusercontent.com/Skillz4Killz/Discordeno/v7/src/handlers/channel.ts\\\";\\nimport { Member } from \\\"https://raw.githubusercontent.com/Skillz4Killz/Discordeno/v7/src/structures/member.ts\\\";\\nimport { kick } from \\\"https://raw.githubusercontent.com/Skillz4Killz/Discordeno/v7/src/handlers/member.ts\\\";\\nimport { deleteMessage } from \\\"https://raw.githubusercontent.com/Skillz4Killz/Discordeno/v7/src/handlers/message.ts\\\";\\nimport { botCache } from \\\"../../mod.ts\\\";\\nimport { createCommandAliases, sendResponse } from \\\"../utils/helpers.ts\\\";\\nimport { Embed } from \\\"../utils/Embed.ts\\\";\\nimport { Args } from \\\"../types/commands.ts\\\";\\n\\nbotCache.commands.set(`kick`, {\\n  name: `kick`,\\n  description: \\\"Kick command.\\\",\\n  // adds cooldowns to the command\\n  cooldown: {\\n    // usages in certain duration of seconds below\\n    allowedUses: 1,\\n    // the cooldown\\n    seconds: 10,\\n  },\\n  // Prevents it from being used in dms\\n  guildOnly: true,\\n  botServerPermissions: [\\\"ADMINISTRATOR\\\"],\\n  userServerPermissions: [\\\"KICK_MEMBERS\\\"],\\n  arguments: [\\n    {\\n      name: \\\"member\\\",\\n      type: \\\"member\\\",\\n      missing: function (message) {\\n        sendResponse(message, `User cannot be found.`);\\n      },\\n      // By default this is true but for the purpose of the guide so you can see this exists.\\n      required: true,\\n    },\\n    {\\n      name: \\\"reason\\\",\\n      // The leftover string provided by the user that was not used by previous args.\\n      type: \\\"...string\\\",\\n      defaultValue: \\\"No reason provided.\\\",\\n      // It is silly to lowercase this but for the purpose of the guide you can see that this is also available to you.\\n      lowercase: true,\\n    },\\n  ],\\n  execute: function (message, args: KickArgs, guild) {\\n    if (!guild) return;\\n    // setting up the embed for report/log\\n    const embed = new Embed()\\n      .setDescription(`Report: ${args.member.mention} Kick`)\\n      .addField(\\\"Reason >\\\", args.reason)\\n      .addField(\\\"Time\\\", message.timestamp.toString());\\n\\n    const reportchannel = guild.channels.find((channel) =>\\n      channel.name === \\\"report\\\"\\n    );\\n    if (!reportchannel) {\\n      return sendResponse(message, \\\"*`Report channel cannot be found!`*\\\");\\n    }\\n\\n    // Delete the message command\\n    deleteMessage(message, \\\"Remove kick command trigger.\\\");\\n    // Kick the user with reason\\n    kick(guild, args.member.user.id, args.reason);\\n    // sends the kick report into log/report\\n    sendMessage(reportchannel, embed);\\n  },\\n});\\n\\n// other ways to call the command, must be in lowercase\\ncreateCommandAliases(\\\"kick\\\", [\\\"boot\\\", \\\"tempban\\\"]);\\n\\ninterface KickArgs {\\n  member: Member;\\n  reason: string;\\n}\\n\")), mdx(\"p\", null, \"Let's take a minute and explain the differences here. The first thing you will probably notice is different is the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arguments\"), \" property. Discordeno provides the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"arguments\"), \" property because it provides argument handling/parsing/validating internally. You don't need to be splitting the message content or going through and validating it yourself. All you do is tell Discordeno that you want a member and a reason. It will do the magic and hard work to get you that data before you even run the command. You just do \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"args.member\"), \" and you have access to the full member object. You can also see that aliases are created slightly different but it's not that huge a impact. The end functionality is the same. There are a lot more powerful aspects to Discordeno like arguments. Keep diving in and you will find all the wonderful tools available to give you the best developer experience possible.\"), mdx(\"h3\", null, \"Need More Examples/Help\"), mdx(\"p\", null, \"If you still need more help converting other aspects of your bot please contact me at \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://discord.gg/J4NqJ72\"\n  }), \"Discord\"), \". I will continue adding more examples to this guide as more people request them.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Discord.JS to Discordeno Guide\",\n  \"metaTitle\": \"Discord.JS to Discordeno | Discordeno\",\n  \"metaDescription\": \"This guide will help should you how to convert a Discord.JS bot over to Discordeno.\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`Understanding The Goals of This Guide`}</h2>\n    <p>{`This guide is not intended to trash or hate on Discord.JS. In fact, Discord.JS is the most popular Node.JS library which is why most users wanting to use Discordeno come from Discord.JS. Today, I had a user ask me for a guide to convert a Discord.JS bot to Discordeno. That was the start of this guide.`}</p>\n    <h2>{`Finding A Open Source Bot`}</h2>\n    <p>{`For the purposes of this guide, I wanted to find a moderation bot that is totally open source to show an example of how to convert the bot to Discordeno. Trying to find one was not easy as most bot's were not using the latest Discord.JS version 12. Trying to find one that was using TypeScript made it even more difficult. My next best solution was to find a moderation bot that was recently updated(showing it is maintained or recently built). The best one I could find was `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Nukestye/Zodiac\"\n      }}>{`Zodiac Bot`}</a>{`.`}</p>\n    <p>{`For the purposes of this guide, I will be using the current `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/Nukestye/Zodiac/tree/213891a38af1b7ecbd068b661ef9062ab58cc818\"\n      }}>{`latest commit`}</a></p>\n    <h2>{`Preparations`}</h2>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`First, create a Discordeno Bot using the `}<a parentName=\"p\" {...{\n            \"href\": \"https://github.com/Skillz4Killz/Discordeno-bot-template\"\n          }}>{`Generator Boilerplate`}</a>{` I will name it Zodiac.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Then `}<inlineCode parentName=\"p\">{`git clone https://github.com/Skillz4Killz/Zodiac.git`}</inlineCode></p>\n      </li>\n    </ul>\n    <p>{`Now that I had the repository cloned, I could begin. Note that although the bot we are converting is built in JavaScript, I converted all code to TypeScript in this Guide as Discordeno is designed to be the best lib for TypeScript developers.`}</p>\n    <p>{`Time to get started!`}</p>\n    <h2>{`Converting main.js (index file)`}</h2>\n    <p>{`The first thing is to convert the `}<inlineCode parentName=\"p\">{`main.js`}</inlineCode>{` file which would be the app.js or index.js file. This is the file that is run to start your bot. In this case, the bot developer chose `}<inlineCode parentName=\"p\">{`main.js`}</inlineCode>{`. In Deno, the initial file is named `}<inlineCode parentName=\"p\">{`mod.ts`}</inlineCode>{` so we can go ahead and opt for the Deno pattern. Note: there is already a `}<inlineCode parentName=\"p\">{`mod.ts`}</inlineCode>{` file created and prebuilt entirely using the Generator.`}</p>\n    <p>{`Current Discord.JS Code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/* Keeping this to shoutout/credit the original author <3\n* @author: nukestye\n*/\n\nconst config = require('./config.json')\nconst fs = require('fs')\nconst log = console.log\n\n// Setting up the way to get commands\nconst { CommandoClient } = require('discord.js-commando')\nconst path = require('path')\n\n// reading events\nfs.readdir('./src/events/', (err, files) => {\n  if (err) return console.error(err)\n  files.forEach((file) => {\n    const eventFunction = require(\\`./src/events/\\${file}\\`)\n    if (eventFunction.disabled) return\n    const event = eventFunction.event || file.split('.')[0]\n    const emitter = (typeof eventFunction.emitter === 'string' ? client[eventFunction.emitter] : eventFunction.emitter) || client\n    const { once } = eventFunction\n    try {\n      emitter[once ? 'once' : 'on'](event, (...args) => eventFunction.run(...args))\n    } catch (error) {\n      console.error(error.stack)\n    }\n  })\n})\n\nconst client = global.client = new CommandoClient({\n  commandPrefix: \\`\\${config.prefix}\\`,\n  owner: \\`\\${config.owner}\\`,\n  invite: \\`\\${config.discord}\\`,\n  unknownCommandResponse: false\n})\n\n// Registing the commands\nclient.registry\n  .registerDefaultTypes()\n// The different fields for cmds\n  .registerGroups([\n    ['mod', 'Moderation Commands'],\n    ['public', 'Public Commands']\n  ])\n  .registerDefaultGroups()\n// Basic cmds can be disabled like {\"cmd: false\"}\n  .registerDefaultCommands()\n// commands in \"/src/commands\" will be counted\n  .registerCommandsIn(path.join(__dirname, '/src/commands'))\n\n// list of activities that the bot goes through\nconst activityArray = [\\`\\${config.prefix}help | \\`]\n// Bot lanuch code\nclient.once('ready', () => {\n  log(\\`Logged in as \\${client.user.tag} in \\${client.guilds.size} guild(s)!\\`)\n  setInterval(() => {\n    const index = Math.floor(Math.random() * (activityArray.length)) // generates a random number between 1 and the length of the activities array list\n    client.user.setActivity(\n      activityArray[index],\n      {\n        type: 'PLAYING'\n      }) // sets bot\"s activities to one of the phrases in the arraylist.\n  }, 5000) // updates every 10000ms = 10s\n})\n// If an error print it out\nclient.on('error', console.error)\n\n// Login in using the token in config\nclient.login(config.env.TOKEN)\n`}</code></pre>\n    <p>{`Discordeno Version:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import Client, {\n  updateEventHandlers,\n} from \"https://raw.githubusercontent.com/Skillz4Killz/Discordeno/v7/src/module/client.ts\";\nimport { configs } from \"./configs.ts\";\nimport { Intents } from \"https://raw.githubusercontent.com/Skillz4Killz/Discordeno/v7/src/types/options.ts\";\nimport { eventHandlers } from \"./src/events/eventHandlers.ts\";\nimport { Message } from \"https://raw.githubusercontent.com/Skillz4Killz/Discordeno/v7/src/structures/message.ts\";\nimport { Command } from \"./src/types/commands.ts\";\nimport { Guild } from \"https://raw.githubusercontent.com/Skillz4Killz/Discordeno/v7/src/structures/guild.ts\";\n\nexport const botCache = {\n  commands: new Map<string, Command>(),\n  commandAliases: new Map<string, string>(),\n  guildPrefixes: new Map<string, string>(),\n  inhibitors: new Map<\n    string,\n    (message: Message, command: Command, guild?: Guild) => boolean\n    >(),\n    eventHandlers: {} as EventHandlers\n};\n\nconst importDirectory = async (path: string) => {\n  const files = Deno.readDirSync(Deno.realPathSync(path));\n\n  for (const file of files) {\n    if (!file.name) continue;\n\n    const currentPath = \\`\\${path}/\\${file.name}\\`;\n    if (file.isFile) {\n      await import(currentPath);\n      continue;\n    }\n\n    importDirectory(currentPath);\n  }\n};\n\n// Forces deno to read all the files which will fill the commands/inhibitors cache etc.\nawait Promise.all(\n  [\"./src/commands\", \"./src/inhibitors\", \"./src/events\"].map((path) => importDirectory(path)),\n);\n\n\nClient({\n  token: configs.token,\n  // Pick the intents you wish to have for your bot.\n    intents: [Intents.GUILDS, Intents.GUILD_MESSAGES],\n    eventHandlers: botCache.eventHandlers\n});\n`}</code></pre>\n    <p>{`Something we haven't converted yet from the `}<inlineCode parentName=\"p\">{`main.js`}</inlineCode>{` files is the event listeners. To do that, we will open up the events folder and find the corresponding event or create it if necessary. In this case, we have the `}<inlineCode parentName=\"p\">{`ready`}</inlineCode>{` event and there is already a `}<inlineCode parentName=\"p\">{`ready.ts`}</inlineCode>{` file. We can just use that.`}</p>\n    <p>{`In our `}<inlineCode parentName=\"p\">{`ready.ts`}</inlineCode>{` file we can add the `}<inlineCode parentName=\"p\">{`ready`}</inlineCode>{` event listener.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { botCache } from \"../../mod.ts\";\nimport { configs } from \"../../configs.ts\";\nimport { cache } from \"https://raw.githubusercontent.com/Skillz4Killz/Discordeno/v7/src/utils/cache.ts\";\nimport { editBotsStatus, chooseRandom } from \"https://raw.githubusercontent.com/Skillz4Killz/Discordeno/v7/src/utils/utils.ts\";\nimport { StatusType } from \"https://raw.githubusercontent.com/Skillz4Killz/Discordeno/v7/src/types/discord.ts\";\nimport { ActivityType } from \"https://raw.githubusercontent.com/Skillz4Killz/Discordeno/v7/src/types/activity.ts\";\n\nbotCache.eventHandlers.ready = function () {\n  console.log(\\`[READY] Bot is online and ready in \\${cache.guilds.size} guild(s)!\\`);\n\n  // list of activities that the bot goes through\n  const activityArray = [\\`\\${configs.prefix}help | \\`];\n  setInterval(() => {\n    editBotsStatus(StatusType.Online, chooseRandom(activityArray), ActivityType.Game)\n  }, 5000)\n};\n`}</code></pre>\n    <p>{`To understand this code, we are setting a function to be run when the bot is `}<inlineCode parentName=\"p\">{`ready`}</inlineCode>{`. Then the bot will edit the bots status every 5 seconds. Notice, that Discordeno provides a nice clean util function to choose a random item from an array. You also have beautiful enums provided that prevent you from making any typos/mistakes.`}</p>\n    <p>{`We have now converted the entire `}<inlineCode parentName=\"p\">{`main.js`}</inlineCode>{` file, in a matter of seconds. The Discordeno official generator took care of the majority of workload and we just modified the `}<inlineCode parentName=\"p\">{`ready.ts`}</inlineCode>{` file.`}</p>\n    <p><inlineCode parentName=\"p\">{`Note:`}</inlineCode>{` I did remove some generally well known \"bad practices\" such as global vars and such. Overall, you will see the functionality of the project will not change as we progress through this guide.`}</p>\n    <h2>{`Converting Commands`}</h2>\n    <p>{`The first command in the commands folder is the `}<inlineCode parentName=\"p\">{`addRole`}</inlineCode>{` command.`}</p>\n    <p>{`This  is the code from the bot:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`// Getting the 'Command' features from Commando\nconst { Command } = require('discord.js-commando')\n\n// Code for the command\nmodule.exports = class addRoleCommand extends Command {\n  constructor (client) {\n    super(client, {\n      // name of the command, must be in lowercase\n      name: 'addrole',\n      // other ways to call the command, must be in lowercase\n      aliases: ['role'],\n      // command group its part of\n      group: 'mod',\n      // name within the command group, must be in lowercase\n      memberName: 'addrole',\n      // Is the description used for 'help' command\n      description: 'Adds mentioned role to mentioned user.',\n      // Prevents it from being used in dms\n      guildOnly: true,\n      // Permissions, list found here > \\`discord.js.org/#/docs/main/11.5.1/class/Permissions?scrollTo=s-FLAGS\\`\n      clientPermissions: ['ADMINISTRATOR', 'MANAGE_ROLES'],\n      userPermissions: ['MANAGE_ROLES'],\n      // Prevents anyone other than owner to use the command\n      ownerOnly: false\n    })\n  }\n\n  // Run code goes here\n  run (message) {\n    const user = message.mentions.members.first()\n    const roleToAdd = message.mentions.roles.first()\n\n    // checking to see if the user has the role or not\n    if (!(user.roles.find(r => r.name === roleToAdd.name))) {\n      user.addRole(roleToAdd)\n      message.channel.send(\\`\\${user} has been given the role: \\${roleToAdd.name}\\`)\n        .then(msg => {\n          msg.delete(5000)\n        })\n    } else {\n      message.channel.send(\\`\\${user} already has the role: \\${roleToAdd.name}\\`)\n    }\n\n    // console.error(user, roleToAdd, message.member.roles.find(r => r.name === roleToAdd));\n  }\n}\n`}</code></pre>\n    <p>{`This is how to do it with Discordeno:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { botCache } from \"../../mod.ts\";\nimport { addRole } from \"https://raw.githubusercontent.com/Skillz4Killz/Discordeno/v7/src/handlers/member.ts\";\nimport { sendAlertResponse, sendResponse } from \"../utils/helpers.ts\";\n\nbotCache.commands.set(\\`addrole\\`, {\n  // Is the description used for 'help' command\n  description: \"Adds mentioned role to mentioned user.\",\n  // Prevents it from being used in dms\n  guildOnly: true,\n  botServerPermissions: [\"ADMINISTRATOR\", \"MANAGE_ROLES\"],\n  userServerPermissions: [\"MANAGE_ROLES\"],\n  execute: (message, _args, guild) => {\n    const [member] = message.mentions();\n    const [roleIDToAdd] = message.mentionRoles;\n        const role = guild?.roles.get(roleIDToAdd)\n\n    // checking to see if the user has the role or not\n    if (!member.roles.includes(roleIDToAdd)) {\n            addRole(guild!, member.user.id, roleIDToAdd)\n            sendAlertResponse(message, \\`has been given the role: \\${role!.name}\\`, 5);\n    } else {\n            sendResponse(message, \\`already has the role: \\${role!.name}\\`)\n    }\n  }\n});\n\n// other ways to call the command\ncreateCommandAliases(\"role\", \"addrole\");\n`}</code></pre>\n    <p>{`Awesome, that is a full command converted from Discord.JS to Discordeno. See how easy it is! Let's convert one more command to see how to really take full advantage of Discordeno boilerplate and have something amazing.`}</p>\n    <p>{`Discord.JS Kick Command Version`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Getting the 'Command' features from Commando\nconst { Command } = require('discord.js-commando')\nconst { RichEmbed } = require('discord.js')\nconst chalk = require('chalk')\nconst log = console.log\n\n// Code for the command\nmodule.exports = class kickCommand extends Command {\n  constructor (client) {\n    super(client, {\n      // name of the command, must be in lowercase\n      name: 'kick',\n      // other ways to call the command, must be in lowercase\n      aliases: ['boot', 'tempban'],\n      // command group its part of\n      group: 'mod',\n      // name within the command group, must be in lowercase\n      memberName: 'kick',\n      // Is the description used for 'help' command\n      description: 'Kick command.',\n      // adds cooldowns to the command\n      throttling: {\n        // usages in certain time x\n        usages: 1,\n        // the cooldown\n        duration: 10\n      },\n      // Prevents it from being used in dms\n      guildOnly: true,\n      // Permissions, list found here > \\`discord.js.org/#/docs/main/11.5.1/class/Permissions?scrollTo=s-FLAGS\\`\n      clientPermissions: ['ADMINISTRATOR'],\n      userPermissions: ['KICK_MEMBERS'],\n      // Prevents anyone other than owner to use the command\n      ownerOnly: false\n\n    })\n  }\n\n  // Run code goes here\n  run (message) {\n    const messageArry = message.content.split(' ')\n    const args = messageArry.slice(1)\n\n    const kUser = message.guild.member(message.mentions.users.first() || message.guild.get(args[0]))\n    if (!kUser) return message.channel.send('User cannot be found!')\n    const kreason = args.join(' ').slice(22)\n\n    // setting up the embed for report/log\n    const kickEmbed = new RichEmbed()\n      .setDescription(\\`Report: \\${kUser} Kick\\`)\n      .addField('Reason >', \\`\\${kreason}\\`)\n      .addField('Time', message.createdAt)\n\n    const reportchannel = message.guild.channels.find('name', 'report')\n    if (!reportchannel) return message.channel.send('*\\`Report channel cannot be found!\\`*')\n\n    // Delete the message command\n    // eslint-disable-next-line camelcase\n    message.delete().catch(O_o => {})\n    // Kick the user with reason\n    message.guild.member(kUser).kick(kreason)\n    // sends the kick report into log/report\n    reportchannel.send(kickEmbed)\n    // Logs the kick into the terminal\n    log(chalk.red('KICK', chalk.underline.bgBlue(kUser) + '!'))\n  }\n}\n`}</code></pre>\n    <p>{`Discordeno Version`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { sendMessage } from \"https://raw.githubusercontent.com/Skillz4Killz/Discordeno/v7/src/handlers/channel.ts\";\nimport { Member } from \"https://raw.githubusercontent.com/Skillz4Killz/Discordeno/v7/src/structures/member.ts\";\nimport { kick } from \"https://raw.githubusercontent.com/Skillz4Killz/Discordeno/v7/src/handlers/member.ts\";\nimport { deleteMessage } from \"https://raw.githubusercontent.com/Skillz4Killz/Discordeno/v7/src/handlers/message.ts\";\nimport { botCache } from \"../../mod.ts\";\nimport { createCommandAliases, sendResponse } from \"../utils/helpers.ts\";\nimport { Embed } from \"../utils/Embed.ts\";\nimport { Args } from \"../types/commands.ts\";\n\nbotCache.commands.set(\\`kick\\`, {\n  name: \\`kick\\`,\n  description: \"Kick command.\",\n  // adds cooldowns to the command\n  cooldown: {\n    // usages in certain duration of seconds below\n    allowedUses: 1,\n    // the cooldown\n    seconds: 10,\n  },\n  // Prevents it from being used in dms\n  guildOnly: true,\n  botServerPermissions: [\"ADMINISTRATOR\"],\n  userServerPermissions: [\"KICK_MEMBERS\"],\n  arguments: [\n    {\n      name: \"member\",\n      type: \"member\",\n      missing: function (message) {\n        sendResponse(message, \\`User cannot be found.\\`);\n      },\n      // By default this is true but for the purpose of the guide so you can see this exists.\n      required: true,\n    },\n    {\n      name: \"reason\",\n      // The leftover string provided by the user that was not used by previous args.\n      type: \"...string\",\n      defaultValue: \"No reason provided.\",\n      // It is silly to lowercase this but for the purpose of the guide you can see that this is also available to you.\n      lowercase: true,\n    },\n  ],\n  execute: function (message, args: KickArgs, guild) {\n    if (!guild) return;\n    // setting up the embed for report/log\n    const embed = new Embed()\n      .setDescription(\\`Report: \\${args.member.mention} Kick\\`)\n      .addField(\"Reason >\", args.reason)\n      .addField(\"Time\", message.timestamp.toString());\n\n    const reportchannel = guild.channels.find((channel) =>\n      channel.name === \"report\"\n    );\n    if (!reportchannel) {\n      return sendResponse(message, \"*\\`Report channel cannot be found!\\`*\");\n    }\n\n    // Delete the message command\n    deleteMessage(message, \"Remove kick command trigger.\");\n    // Kick the user with reason\n    kick(guild, args.member.user.id, args.reason);\n    // sends the kick report into log/report\n    sendMessage(reportchannel, embed);\n  },\n});\n\n// other ways to call the command, must be in lowercase\ncreateCommandAliases(\"kick\", [\"boot\", \"tempban\"]);\n\ninterface KickArgs {\n  member: Member;\n  reason: string;\n}\n`}</code></pre>\n    <p>{`Let's take a minute and explain the differences here. The first thing you will probably notice is different is the `}<inlineCode parentName=\"p\">{`arguments`}</inlineCode>{` property. Discordeno provides the `}<inlineCode parentName=\"p\">{`arguments`}</inlineCode>{` property because it provides argument handling/parsing/validating internally. You don't need to be splitting the message content or going through and validating it yourself. All you do is tell Discordeno that you want a member and a reason. It will do the magic and hard work to get you that data before you even run the command. You just do `}<inlineCode parentName=\"p\">{`args.member`}</inlineCode>{` and you have access to the full member object. You can also see that aliases are created slightly different but it's not that huge a impact. The end functionality is the same. There are a lot more powerful aspects to Discordeno like arguments. Keep diving in and you will find all the wonderful tools available to give you the best developer experience possible.`}</p>\n    <h3>{`Need More Examples/Help`}</h3>\n    <p>{`If you still need more help converting other aspects of your bot please contact me at `}<a parentName=\"p\" {...{\n        \"href\": \"https://discord.gg/J4NqJ72\"\n      }}>{`Discord`}</a>{`. I will continue adding more examples to this guide as more people request them.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}