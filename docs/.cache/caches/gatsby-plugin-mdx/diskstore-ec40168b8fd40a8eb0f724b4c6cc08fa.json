{"expireTime":9007200851632125000,"key":"gatsby-plugin-mdx-entire-payload-1b4d929b79efe91bcaa6c55d9be70894-","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Woah! You are almost half way done with understanding all of Discordeno. Amazing isn't it? Something you may have noticed in the last section was there were some options that prevented some commands from running like ","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":218,"offset":218},"indent":[]}},{"type":"inlineCode","value":"dmOnly","position":{"start":{"line":2,"column":218,"offset":218},"end":{"line":2,"column":226,"offset":226},"indent":[]}},{"type":"text","value":" or the permission options. we created a setting to prevent the monitor from running in certain channels. What if we wanted to do prevent commands from happening? How would we prevent commands from running?","position":{"start":{"line":2,"column":226,"offset":226},"end":{"line":2,"column":432,"offset":432},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":432,"offset":432},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"What is an Inhibitor?","position":{"start":{"line":4,"column":4,"offset":437},"end":{"line":4,"column":25,"offset":458},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":434},"end":{"line":4,"column":25,"offset":458},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"An Inhibitor is very similar to how monitors work. A monitor runs on every message but an inhibitor runs on every command. Remember all those command options like cooldown, permissions, permissionLevel, nsfw, etc... Each and every one of these options has an inhibitor in that checks commands for these settings.","position":{"start":{"line":6,"column":1,"offset":460},"end":{"line":6,"column":313,"offset":772},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":460},"end":{"line":6,"column":313,"offset":772},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Let's create our own inhibitor that would prevent commands from being used if the user is not a VIP user.","position":{"start":{"line":8,"column":1,"offset":774},"end":{"line":8,"column":106,"offset":879},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":774},"end":{"line":8,"column":106,"offset":879},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Note:","position":{"start":{"line":10,"column":5,"offset":885},"end":{"line":10,"column":10,"offset":890},"indent":[]}}],"position":{"start":{"line":10,"column":3,"offset":883},"end":{"line":10,"column":12,"offset":892},"indent":[]}},{"type":"text","value":" It is important to remember that everything below can be done with a simple permission level as well. We will create our own custom permission levels but for the purposes of this guide and to be able to learn about Inhibitors, we will be using an inhibitor.","position":{"start":{"line":10,"column":12,"offset":892},"end":{"line":10,"column":270,"offset":1150},"indent":[]}}],"position":{"start":{"line":10,"column":3,"offset":883},"end":{"line":10,"column":270,"offset":1150},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":881},"end":{"line":10,"column":270,"offset":1150},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Creating Inhibitors!\",\"metaTitle\":\"Creating An Inhibitor | Discordeno\",\"metaDescription\":\"Let's create our very own bot with Discordeno!\"}","position":{"start":{"line":13,"column":1,"offset":1153},"end":{"line":13,"column":177,"offset":1329},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":13,"column":177,"offset":1329}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Creating Inhibitors!\",\n  \"metaTitle\": \"Creating An Inhibitor | Discordeno\",\n  \"metaDescription\": \"Let's create our very own bot with Discordeno!\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Woah! You are almost half way done with understanding all of Discordeno. Amazing isn't it? Something you may have noticed in the last section was there were some options that prevented some commands from running like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dmOnly\"), \" or the permission options. we created a setting to prevent the monitor from running in certain channels. What if we wanted to do prevent commands from happening? How would we prevent commands from running?\"), mdx(\"h2\", null, \"What is an Inhibitor?\"), mdx(\"p\", null, \"An Inhibitor is very similar to how monitors work. A monitor runs on every message but an inhibitor runs on every command. Remember all those command options like cooldown, permissions, permissionLevel, nsfw, etc... Each and every one of these options has an inhibitor in that checks commands for these settings.\"), mdx(\"p\", null, \"Let's create our own inhibitor that would prevent commands from being used if the user is not a VIP user.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note:\"), \" It is important to remember that everything below can be done with a simple permission level as well. We will create our own custom permission levels but for the purposes of this guide and to be able to learn about Inhibitors, we will be using an inhibitor.\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Creating Inhibitors!\",\n  \"metaTitle\": \"Creating An Inhibitor | Discordeno\",\n  \"metaDescription\": \"Let's create our very own bot with Discordeno!\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Woah! You are almost half way done with understanding all of Discordeno. Amazing isn't it? Something you may have noticed in the last section was there were some options that prevented some commands from running like `}<inlineCode parentName=\"p\">{`dmOnly`}</inlineCode>{` or the permission options. we created a setting to prevent the monitor from running in certain channels. What if we wanted to do prevent commands from happening? How would we prevent commands from running?`}</p>\n    <h2>{`What is an Inhibitor?`}</h2>\n    <p>{`An Inhibitor is very similar to how monitors work. A monitor runs on every message but an inhibitor runs on every command. Remember all those command options like cooldown, permissions, permissionLevel, nsfw, etc... Each and every one of these options has an inhibitor in that checks commands for these settings.`}</p>\n    <p>{`Let's create our own inhibitor that would prevent commands from being used if the user is not a VIP user.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Note:`}</strong>{` It is important to remember that everything below can be done with a simple permission level as well. We will create our own custom permission levels but for the purposes of this guide and to be able to learn about Inhibitors, we will be using an inhibitor.`}</p>\n    </blockquote>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}