{"expireTime":9007200851642145000,"key":"gatsby-plugin-mdx-entire-payload-505dec895651802ed4c64262a9d66816-","val":{"mdast":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"Woot! You have mastered Discordeno inhibitors already. Now it's time to finally make our bot multi-lingual. VÃ manos!","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":117,"offset":117},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":117,"offset":117},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"What Is A Discordeno Language?","position":{"start":{"line":4,"column":4,"offset":122},"end":{"line":4,"column":34,"offset":152},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":119},"end":{"line":4,"column":34,"offset":152},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A Discordeno language is a folder that will hold all our responses that the bot sends. By having various different language files you can have a multi-lingual bot that can be used in different languages.","position":{"start":{"line":6,"column":1,"offset":154},"end":{"line":6,"column":204,"offset":357},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":154},"end":{"line":6,"column":204,"offset":357},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"i18next","position":{"start":{"line":8,"column":4,"offset":362},"end":{"line":8,"column":11,"offset":369},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":359},"end":{"line":8,"column":11,"offset":369},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"By default, Discordeno comes built with support for i18next(one of if not the best localization libraries). If you want to learn more, go to ","position":{"start":{"line":10,"column":1,"offset":371},"end":{"line":10,"column":142,"offset":512},"indent":[]}},{"type":"link","title":null,"url":"https://www.i18next.com/","children":[{"type":"text","value":"i18next website","position":{"start":{"line":10,"column":143,"offset":513},"end":{"line":10,"column":158,"offset":528},"indent":[]}}],"position":{"start":{"line":10,"column":142,"offset":512},"end":{"line":10,"column":185,"offset":555},"indent":[]}},{"type":"text","value":". For now, there is probably not going to be anything you will need to learn there. As most of the functionality has already been created for you right here in Discordeno.","position":{"start":{"line":10,"column":185,"offset":555},"end":{"line":10,"column":356,"offset":726},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":371},"end":{"line":10,"column":356,"offset":726},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Default Language","position":{"start":{"line":12,"column":4,"offset":731},"end":{"line":12,"column":20,"offset":747},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":728},"end":{"line":12,"column":20,"offset":747},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The default language with Discordeno is American English which uses the name ","position":{"start":{"line":14,"column":1,"offset":749},"end":{"line":14,"column":78,"offset":826},"indent":[]}},{"type":"inlineCode","value":"en_US","position":{"start":{"line":14,"column":78,"offset":826},"end":{"line":14,"column":85,"offset":833},"indent":[]}},{"type":"text","value":". So when you open the ","position":{"start":{"line":14,"column":85,"offset":833},"end":{"line":14,"column":108,"offset":856},"indent":[]}},{"type":"inlineCode","value":"src/languages/","position":{"start":{"line":14,"column":108,"offset":856},"end":{"line":14,"column":124,"offset":872},"indent":[]}},{"type":"text","value":" folder you will find a folder called ","position":{"start":{"line":14,"column":124,"offset":872},"end":{"line":14,"column":162,"offset":910},"indent":[]}},{"type":"inlineCode","value":"en_US","position":{"start":{"line":14,"column":162,"offset":910},"end":{"line":14,"column":169,"offset":917},"indent":[]}},{"type":"text","value":". This is where all the strings can be kept for your bot that can be easily translated by other translators.","position":{"start":{"line":14,"column":169,"offset":917},"end":{"line":14,"column":277,"offset":1025},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":749},"end":{"line":14,"column":277,"offset":1025},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Understanding The Folder Structure","position":{"start":{"line":16,"column":4,"offset":1030},"end":{"line":16,"column":38,"offset":1064},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":1027},"end":{"line":16,"column":38,"offset":1064},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The first folder inside the languages folder must be a language folder following the name pattern like ","position":{"start":{"line":18,"column":1,"offset":1066},"end":{"line":18,"column":104,"offset":1169},"indent":[]}},{"type":"inlineCode","value":"en_US","position":{"start":{"line":18,"column":104,"offset":1169},"end":{"line":18,"column":111,"offset":1176},"indent":[]}},{"type":"text","value":". So for example, if we wanted to add a Spanish(Spain) language to our bot we would create a new folder called ","position":{"start":{"line":18,"column":111,"offset":1176},"end":{"line":18,"column":222,"offset":1287},"indent":[]}},{"type":"inlineCode","value":"es_ES","position":{"start":{"line":18,"column":222,"offset":1287},"end":{"line":18,"column":229,"offset":1294},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":18,"column":229,"offset":1294},"end":{"line":18,"column":230,"offset":1295},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":1066},"end":{"line":18,"column":230,"offset":1295},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can have as many folder in here as you like. For example I can do something like ","position":{"start":{"line":20,"column":1,"offset":1297},"end":{"line":20,"column":86,"offset":1382},"indent":[]}},{"type":"inlineCode","value":"src/languages/en_US/commands/fun/hug.json","position":{"start":{"line":20,"column":86,"offset":1382},"end":{"line":20,"column":129,"offset":1425},"indent":[]}},{"type":"text","value":". Notice that I have created categories to help keep them categorized and easier to find. You can do it however you wish to have them. For now, just remember that files must always be ","position":{"start":{"line":20,"column":129,"offset":1425},"end":{"line":20,"column":313,"offset":1609},"indent":[]}},{"type":"inlineCode","value":".json","position":{"start":{"line":20,"column":313,"offset":1609},"end":{"line":20,"column":320,"offset":1616},"indent":[]}},{"type":"text","value":" files in these folders. ","position":{"start":{"line":20,"column":320,"offset":1616},"end":{"line":20,"column":345,"offset":1641},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"JSON is required.","position":{"start":{"line":20,"column":347,"offset":1643},"end":{"line":20,"column":364,"offset":1660},"indent":[]}}],"position":{"start":{"line":20,"column":345,"offset":1641},"end":{"line":20,"column":366,"offset":1662},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":1297},"end":{"line":20,"column":366,"offset":1662},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Adding Hug Strings","position":{"start":{"line":22,"column":4,"offset":1667},"end":{"line":22,"column":22,"offset":1685},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":1664},"end":{"line":22,"column":22,"offset":1685},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Earlier in the guide, we made a hug command. So let's make that commands translations work properly now.","position":{"start":{"line":24,"column":1,"offset":1687},"end":{"line":24,"column":105,"offset":1791},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":1687},"end":{"line":24,"column":105,"offset":1791},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Create the ","position":{"start":{"line":26,"column":3,"offset":1795},"end":{"line":26,"column":14,"offset":1806},"indent":[]}},{"type":"inlineCode","value":"hug.json","position":{"start":{"line":26,"column":14,"offset":1806},"end":{"line":26,"column":24,"offset":1816},"indent":[]}},{"type":"text","value":" file in the ","position":{"start":{"line":26,"column":24,"offset":1816},"end":{"line":26,"column":37,"offset":1829},"indent":[]}},{"type":"inlineCode","value":"src/languages/en_US/commands/fun/","position":{"start":{"line":26,"column":37,"offset":1829},"end":{"line":26,"column":72,"offset":1864},"indent":[]}},{"type":"text","value":" folder.","position":{"start":{"line":26,"column":72,"offset":1864},"end":{"line":26,"column":80,"offset":1872},"indent":[]}}],"position":{"start":{"line":26,"column":3,"offset":1795},"end":{"line":26,"column":80,"offset":1872},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":1793},"end":{"line":26,"column":80,"offset":1872},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":1793},"end":{"line":26,"column":80,"offset":1872},"indent":[]}},{"type":"code","lang":"json","meta":null,"value":"{\n\t\"DESCRIPTION\": \"Hug yourself or another user.\"\n}","position":{"start":{"line":28,"column":1,"offset":1874},"end":{"line":32,"column":4,"offset":1937},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Most of the time, you should start with this base. The ","position":{"start":{"line":34,"column":1,"offset":1939},"end":{"line":34,"column":56,"offset":1994},"indent":[]}},{"type":"inlineCode","value":"DESCRIPTION","position":{"start":{"line":34,"column":56,"offset":1994},"end":{"line":34,"column":69,"offset":2007},"indent":[]}},{"type":"text","value":" key, is used in the help command and provides the description for the command. When someone types ","position":{"start":{"line":34,"column":69,"offset":2007},"end":{"line":34,"column":168,"offset":2106},"indent":[]}},{"type":"inlineCode","value":"!help hug","position":{"start":{"line":34,"column":168,"offset":2106},"end":{"line":34,"column":179,"offset":2117},"indent":[]}},{"type":"text","value":" they would see this description you typed.","position":{"start":{"line":34,"column":179,"offset":2117},"end":{"line":34,"column":222,"offset":2160},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":1939},"end":{"line":34,"column":222,"offset":2160},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In our hug command we also had 2 other keys we used. ","position":{"start":{"line":36,"column":1,"offset":2162},"end":{"line":36,"column":54,"offset":2215},"indent":[]}},{"type":"inlineCode","value":"SELF","position":{"start":{"line":36,"column":54,"offset":2215},"end":{"line":36,"column":60,"offset":2221},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":36,"column":60,"offset":2221},"end":{"line":36,"column":65,"offset":2226},"indent":[]}},{"type":"inlineCode","value":"OTHER","position":{"start":{"line":36,"column":65,"offset":2226},"end":{"line":36,"column":72,"offset":2233},"indent":[]}},{"type":"text","value":" so let's add those in.","position":{"start":{"line":36,"column":72,"offset":2233},"end":{"line":36,"column":95,"offset":2256},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":2162},"end":{"line":36,"column":95,"offset":2256},"indent":[]}},{"type":"code","lang":"json","meta":null,"value":"{\n\t\"DESCRIPTION\": \"Hug yourself or another user.\",\n\t\"SELF\": \"If you had no one to hug you could have hugged me. Years from now, when you're thinking about me, you're gonna say: 'How did I ever get along without that wonderful, constant companion?' *Woof.*\",\n\t\"OTHER\": \"{{user}} was hugged by {{mention}}\"\n}","position":{"start":{"line":38,"column":1,"offset":2258},"end":{"line":44,"column":4,"offset":2576},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Now the ","position":{"start":{"line":46,"column":1,"offset":2578},"end":{"line":46,"column":9,"offset":2586},"indent":[]}},{"type":"inlineCode","value":"\"SELF\"","position":{"start":{"line":46,"column":9,"offset":2586},"end":{"line":46,"column":17,"offset":2594},"indent":[]}},{"type":"text","value":" is pretty easy to understand but the ","position":{"start":{"line":46,"column":17,"offset":2594},"end":{"line":46,"column":55,"offset":2632},"indent":[]}},{"type":"inlineCode","value":"OTHER","position":{"start":{"line":46,"column":55,"offset":2632},"end":{"line":46,"column":62,"offset":2639},"indent":[]}},{"type":"text","value":" has some interesting things in it so let's jump into that.","position":{"start":{"line":46,"column":62,"offset":2639},"end":{"line":46,"column":121,"offset":2698},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":2578},"end":{"line":46,"column":121,"offset":2698},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Translate Function","position":{"start":{"line":48,"column":4,"offset":2703},"end":{"line":48,"column":22,"offset":2721},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":2700},"end":{"line":48,"column":22,"offset":2721},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Discordeno provides you a built in function called ","position":{"start":{"line":50,"column":1,"offset":2723},"end":{"line":50,"column":52,"offset":2774},"indent":[]}},{"type":"inlineCode","value":"translate","position":{"start":{"line":50,"column":52,"offset":2774},"end":{"line":50,"column":63,"offset":2785},"indent":[]}},{"type":"text","value":". It takes in 3 different arguments.","position":{"start":{"line":50,"column":63,"offset":2785},"end":{"line":50,"column":99,"offset":2821},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":2723},"end":{"line":50,"column":99,"offset":2821},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"guildID","position":{"start":{"line":52,"column":3,"offset":2825},"end":{"line":52,"column":12,"offset":2834},"indent":[]}},{"type":"text","value":" the id of the server. This is used to determine which language to use.","position":{"start":{"line":52,"column":12,"offset":2834},"end":{"line":52,"column":83,"offset":2905},"indent":[]}}],"position":{"start":{"line":52,"column":3,"offset":2825},"end":{"line":52,"column":83,"offset":2905},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":2823},"end":{"line":52,"column":83,"offset":2905},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"key","position":{"start":{"line":53,"column":3,"offset":2908},"end":{"line":53,"column":8,"offset":2913},"indent":[]}},{"type":"text","value":" the unique folderpath:KEY string that will determine which string to translate.","position":{"start":{"line":53,"column":8,"offset":2913},"end":{"line":53,"column":88,"offset":2993},"indent":[]}}],"position":{"start":{"line":53,"column":3,"offset":2908},"end":{"line":53,"column":88,"offset":2993},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":2906},"end":{"line":53,"column":88,"offset":2993},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"options","position":{"start":{"line":54,"column":3,"offset":2996},"end":{"line":54,"column":12,"offset":3005},"indent":[]}},{"type":"text","value":" the variables that the strings have available to them.","position":{"start":{"line":54,"column":12,"offset":3005},"end":{"line":54,"column":67,"offset":3060},"indent":[]}}],"position":{"start":{"line":54,"column":3,"offset":2996},"end":{"line":54,"column":67,"offset":3060},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":2994},"end":{"line":54,"column":67,"offset":3060},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":2823},"end":{"line":54,"column":67,"offset":3060},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"i18next allows you to pass in variables that you can use when you want in your strings. If you recall from our guide ealier we passed in 2 variables.","position":{"start":{"line":56,"column":1,"offset":3062},"end":{"line":56,"column":150,"offset":3211},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":3062},"end":{"line":56,"column":150,"offset":3211},"indent":[]}},{"type":"code","lang":"ts","meta":null,"value":"translate(\n\tmessage.guildID,\n\t`commands/fun/${data.name}:${type}`,\n\t{ mention: message.member()!.mention, user: member.mention },\n)","position":{"start":{"line":58,"column":1,"offset":3213},"end":{"line":64,"column":4,"offset":3354},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Here we can see that we passed in:","position":{"start":{"line":66,"column":1,"offset":3356},"end":{"line":66,"column":35,"offset":3390},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":3356},"end":{"line":66,"column":35,"offset":3390},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"mention","position":{"start":{"line":68,"column":3,"offset":3394},"end":{"line":68,"column":12,"offset":3403},"indent":[]}},{"type":"text","value":": The user mention who used this command. ","position":{"start":{"line":68,"column":12,"offset":3403},"end":{"line":68,"column":54,"offset":3445},"indent":[]}},{"type":"inlineCode","value":"!hug","position":{"start":{"line":68,"column":54,"offset":3445},"end":{"line":68,"column":60,"offset":3451},"indent":[]}}],"position":{"start":{"line":68,"column":3,"offset":3394},"end":{"line":68,"column":60,"offset":3451},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":3392},"end":{"line":68,"column":60,"offset":3451},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"user","position":{"start":{"line":69,"column":3,"offset":3454},"end":{"line":69,"column":9,"offset":3460},"indent":[]}},{"type":"text","value":": The user mention of the member who was @ by the command author. ","position":{"start":{"line":69,"column":9,"offset":3460},"end":{"line":69,"column":75,"offset":3526},"indent":[]}},{"type":"inlineCode","value":"!hug @o'neill","position":{"start":{"line":69,"column":75,"offset":3526},"end":{"line":69,"column":90,"offset":3541},"indent":[]}}],"position":{"start":{"line":69,"column":3,"offset":3454},"end":{"line":69,"column":90,"offset":3541},"indent":[]}}],"position":{"start":{"line":69,"column":1,"offset":3452},"end":{"line":69,"column":90,"offset":3541},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":3392},"end":{"line":69,"column":90,"offset":3541},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Variables","position":{"start":{"line":71,"column":4,"offset":3546},"end":{"line":71,"column":13,"offset":3555},"indent":[]}}],"position":{"start":{"line":71,"column":1,"offset":3543},"end":{"line":71,"column":13,"offset":3555},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Variables in i18next use the ","position":{"start":{"line":73,"column":1,"offset":3557},"end":{"line":73,"column":30,"offset":3586},"indent":[]}},{"type":"inlineCode","value":"{{}}","position":{"start":{"line":73,"column":30,"offset":3586},"end":{"line":73,"column":36,"offset":3592},"indent":[]}},{"type":"text","value":" format. So the variable ","position":{"start":{"line":73,"column":36,"offset":3592},"end":{"line":73,"column":61,"offset":3617},"indent":[]}},{"type":"inlineCode","value":"mention","position":{"start":{"line":73,"column":61,"offset":3617},"end":{"line":73,"column":70,"offset":3626},"indent":[]}},{"type":"text","value":" would be used by doing ","position":{"start":{"line":73,"column":70,"offset":3626},"end":{"line":73,"column":94,"offset":3650},"indent":[]}},{"type":"inlineCode","value":"{{mention}}","position":{"start":{"line":73,"column":94,"offset":3650},"end":{"line":73,"column":107,"offset":3663},"indent":[]}}],"position":{"start":{"line":73,"column":1,"offset":3557},"end":{"line":73,"column":107,"offset":3663},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Key Rules","position":{"start":{"line":75,"column":4,"offset":3668},"end":{"line":75,"column":13,"offset":3677},"indent":[]}}],"position":{"start":{"line":75,"column":1,"offset":3665},"end":{"line":75,"column":13,"offset":3677},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"When you create keys in the files there are a couple rules to follow.","position":{"start":{"line":77,"column":1,"offset":3679},"end":{"line":77,"column":70,"offset":3748},"indent":[]}}],"position":{"start":{"line":77,"column":1,"offset":3679},"end":{"line":77,"column":70,"offset":3748},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Never use ","position":{"start":{"line":79,"column":3,"offset":3752},"end":{"line":79,"column":13,"offset":3762},"indent":[]}},{"type":"inlineCode","value":":","position":{"start":{"line":79,"column":13,"offset":3762},"end":{"line":79,"column":16,"offset":3765},"indent":[]}},{"type":"text","value":" in your key name. ","position":{"start":{"line":79,"column":16,"offset":3765},"end":{"line":79,"column":35,"offset":3784},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"REQUIRED","position":{"start":{"line":79,"column":37,"offset":3786},"end":{"line":79,"column":45,"offset":3794},"indent":[]}}],"position":{"start":{"line":79,"column":35,"offset":3784},"end":{"line":79,"column":47,"offset":3796},"indent":[]}}],"position":{"start":{"line":79,"column":3,"offset":3752},"end":{"line":79,"column":47,"offset":3796},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":3750},"end":{"line":79,"column":47,"offset":3796},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"ALWAYS USE UPPERCASE ","position":{"start":{"line":80,"column":3,"offset":3799},"end":{"line":80,"column":24,"offset":3820},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"OPTIONAL","position":{"start":{"line":80,"column":26,"offset":3822},"end":{"line":80,"column":34,"offset":3830},"indent":[]}}],"position":{"start":{"line":80,"column":24,"offset":3820},"end":{"line":80,"column":36,"offset":3832},"indent":[]}}],"position":{"start":{"line":80,"column":3,"offset":3799},"end":{"line":80,"column":36,"offset":3832},"indent":[]}}],"position":{"start":{"line":80,"column":1,"offset":3797},"end":{"line":80,"column":36,"offset":3832},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Words are separated by ","position":{"start":{"line":81,"column":3,"offset":3835},"end":{"line":81,"column":26,"offset":3858},"indent":[]}},{"type":"inlineCode","value":"_","position":{"start":{"line":81,"column":26,"offset":3858},"end":{"line":81,"column":29,"offset":3861},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":81,"column":29,"offset":3861},"end":{"line":81,"column":30,"offset":3862},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"OPTIONAL","position":{"start":{"line":81,"column":32,"offset":3864},"end":{"line":81,"column":40,"offset":3872},"indent":[]}}],"position":{"start":{"line":81,"column":30,"offset":3862},"end":{"line":81,"column":42,"offset":3874},"indent":[]}}],"position":{"start":{"line":81,"column":3,"offset":3835},"end":{"line":81,"column":42,"offset":3874},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":3833},"end":{"line":81,"column":42,"offset":3874},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":3750},"end":{"line":81,"column":42,"offset":3874},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The first one is the only one that is mandatory. The other two are recommended for you.","position":{"start":{"line":83,"column":1,"offset":3876},"end":{"line":83,"column":88,"offset":3963},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":3876},"end":{"line":83,"column":88,"offset":3963},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Missing Keys","position":{"start":{"line":85,"column":4,"offset":3968},"end":{"line":85,"column":16,"offset":3980},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":3965},"end":{"line":85,"column":16,"offset":3980},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Every developer forgets stuff sometimes. When you forget to translate a key, it will be marked as a missing key and you will be alerted. If you provided a channelID in the configs file, you be be sent a message there and it will also be logged in your console.","position":{"start":{"line":87,"column":1,"offset":3982},"end":{"line":87,"column":261,"offset":4242},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":3982},"end":{"line":87,"column":261,"offset":4242},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Spanish Version","position":{"start":{"line":89,"column":4,"offset":4247},"end":{"line":89,"column":19,"offset":4262},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":4244},"end":{"line":89,"column":19,"offset":4262},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Let's just create a spanish version of the hug command from above to see an example of different languages.","position":{"start":{"line":91,"column":1,"offset":4264},"end":{"line":91,"column":108,"offset":4371},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":4264},"end":{"line":91,"column":108,"offset":4371},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Create a file called ","position":{"start":{"line":93,"column":3,"offset":4375},"end":{"line":93,"column":24,"offset":4396},"indent":[]}},{"type":"inlineCode","value":"hug.json","position":{"start":{"line":93,"column":24,"offset":4396},"end":{"line":93,"column":34,"offset":4406},"indent":[]}},{"type":"text","value":" in the folder ","position":{"start":{"line":93,"column":34,"offset":4406},"end":{"line":93,"column":49,"offset":4421},"indent":[]}},{"type":"inlineCode","value":"src/languages/es_ES/commands/fun/","position":{"start":{"line":93,"column":49,"offset":4421},"end":{"line":93,"column":84,"offset":4456},"indent":[]}}],"position":{"start":{"line":93,"column":3,"offset":4375},"end":{"line":93,"column":84,"offset":4456},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":4373},"end":{"line":93,"column":84,"offset":4456},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":4373},"end":{"line":93,"column":84,"offset":4456},"indent":[]}},{"type":"code","lang":"json","meta":null,"value":"{\n\t\"DESCRIPTION\": \"AbrÃ¡zate a ti mismo oa otro usuario\",\n\t\"SELF\": \"Si no tuvieras a nadie a quien abrazar, podrÃ­as haberme abrazado. AÃ±os a partir de ahora, cuando estÃ©s pensando en mÃ­, dirÃ¡s: 'Â¿CÃ³mo me las arreglÃ© sin esa maravillosa y constante compaÃ±era?' *Guau.*\",\n\t\"OTHER\": \"{{user}} fue abrazado por {{mention}}\"\n}","position":{"start":{"line":95,"column":1,"offset":4458},"end":{"line":101,"column":4,"offset":4790},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Notice, that there are 2 thing that were ","position":{"start":{"line":103,"column":1,"offset":4792},"end":{"line":103,"column":42,"offset":4833},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"NOT","position":{"start":{"line":103,"column":44,"offset":4835},"end":{"line":103,"column":47,"offset":4838},"indent":[]}}],"position":{"start":{"line":103,"column":42,"offset":4833},"end":{"line":103,"column":49,"offset":4840},"indent":[]}},{"type":"text","value":" translated. The ","position":{"start":{"line":103,"column":49,"offset":4840},"end":{"line":103,"column":66,"offset":4857},"indent":[]}},{"type":"inlineCode","value":"KEY","position":{"start":{"line":103,"column":66,"offset":4857},"end":{"line":103,"column":71,"offset":4862},"indent":[]}},{"type":"text","value":" names and the ","position":{"start":{"line":103,"column":71,"offset":4862},"end":{"line":103,"column":86,"offset":4877},"indent":[]}},{"type":"inlineCode","value":"VARIABLES","position":{"start":{"line":103,"column":86,"offset":4877},"end":{"line":103,"column":97,"offset":4888},"indent":[]}},{"type":"text","value":". These 2 things should never be translated. Anything else can be translated upon your needs.","position":{"start":{"line":103,"column":97,"offset":4888},"end":{"line":103,"column":190,"offset":4981},"indent":[]}}],"position":{"start":{"line":103,"column":1,"offset":4792},"end":{"line":103,"column":190,"offset":4981},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Localization Platform","position":{"start":{"line":105,"column":4,"offset":4986},"end":{"line":105,"column":25,"offset":5007},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":4983},"end":{"line":105,"column":25,"offset":5007},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"i18next works perfectly with localization platforms. For example, you can easily plug in ","position":{"start":{"line":107,"column":1,"offset":5009},"end":{"line":107,"column":90,"offset":5098},"indent":[]}},{"type":"inlineCode","value":"crowdin","position":{"start":{"line":107,"column":90,"offset":5098},"end":{"line":107,"column":99,"offset":5107},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":107,"column":99,"offset":5107},"end":{"line":107,"column":103,"offset":5111},"indent":[]}},{"type":"inlineCode","value":"transifex","position":{"start":{"line":107,"column":103,"offset":5111},"end":{"line":107,"column":114,"offset":5122},"indent":[]}},{"type":"text","value":" to your project.","position":{"start":{"line":107,"column":114,"offset":5122},"end":{"line":107,"column":131,"offset":5139},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":5009},"end":{"line":107,"column":131,"offset":5139},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://www.transifex.com/","children":[{"type":"text","value":"Transifex","position":{"start":{"line":109,"column":4,"offset":5144},"end":{"line":109,"column":13,"offset":5153},"indent":[]}}],"position":{"start":{"line":109,"column":3,"offset":5143},"end":{"line":109,"column":42,"offset":5182},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":109,"column":42,"offset":5182},"end":{"line":109,"column":43,"offset":5183},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"This is the one I use in my bot but you can use anything you like.","position":{"start":{"line":109,"column":44,"offset":5184},"end":{"line":109,"column":110,"offset":5250},"indent":[]}}],"position":{"start":{"line":109,"column":43,"offset":5183},"end":{"line":109,"column":111,"offset":5251},"indent":[]}}],"position":{"start":{"line":109,"column":3,"offset":5143},"end":{"line":109,"column":111,"offset":5251},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":5141},"end":{"line":109,"column":111,"offset":5251},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://crowdin.com/","children":[{"type":"text","value":"Crowdin","position":{"start":{"line":110,"column":4,"offset":5255},"end":{"line":110,"column":11,"offset":5262},"indent":[]}}],"position":{"start":{"line":110,"column":3,"offset":5254},"end":{"line":110,"column":34,"offset":5285},"indent":[]}}],"position":{"start":{"line":110,"column":3,"offset":5254},"end":{"line":110,"column":34,"offset":5285},"indent":[]}}],"position":{"start":{"line":110,"column":1,"offset":5252},"end":{"line":110,"column":34,"offset":5285},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":5141},"end":{"line":110,"column":34,"offset":5285},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Challenge","position":{"start":{"line":112,"column":4,"offset":5290},"end":{"line":112,"column":13,"offset":5299},"indent":[]}}],"position":{"start":{"line":112,"column":1,"offset":5287},"end":{"line":112,"column":13,"offset":5299},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Wow! You have even masted languages. Go ahead and jump back to the role command we made earlier and add translation support to it. Give it some love!","position":{"start":{"line":114,"column":1,"offset":5301},"end":{"line":114,"column":150,"offset":5450},"indent":[]}}],"position":{"start":{"line":114,"column":1,"offset":5301},"end":{"line":114,"column":150,"offset":5450},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Once you are ready, let's go make our first monitor.","position":{"start":{"line":116,"column":1,"offset":5452},"end":{"line":116,"column":53,"offset":5504},"indent":[]}}],"position":{"start":{"line":116,"column":1,"offset":5452},"end":{"line":116,"column":53,"offset":5504},"indent":[]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Creating Languages!\",\"metaTitle\":\"Creating A Language | Discordeno\",\"metaDescription\":\"Let's create our very own bot with Discordeno!\"}","position":{"start":{"line":119,"column":1,"offset":5507},"end":{"line":119,"column":174,"offset":5680},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":119,"column":174,"offset":5680}}},"scopeImports":["import * as React from 'react'"],"scopeIdentifiers":["React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Creating Languages!\",\n  \"metaTitle\": \"Creating A Language | Discordeno\",\n  \"metaDescription\": \"Let's create our very own bot with Discordeno!\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Woot! You have mastered Discordeno inhibitors already. Now it's time to finally make our bot multi-lingual. V\\xE0manos!\"), mdx(\"h2\", null, \"What Is A Discordeno Language?\"), mdx(\"p\", null, \"A Discordeno language is a folder that will hold all our responses that the bot sends. By having various different language files you can have a multi-lingual bot that can be used in different languages.\"), mdx(\"h2\", null, \"i18next\"), mdx(\"p\", null, \"By default, Discordeno comes built with support for i18next(one of if not the best localization libraries). If you want to learn more, go to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.i18next.com/\"\n  }), \"i18next website\"), \". For now, there is probably not going to be anything you will need to learn there. As most of the functionality has already been created for you right here in Discordeno.\"), mdx(\"h2\", null, \"Default Language\"), mdx(\"p\", null, \"The default language with Discordeno is American English which uses the name \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"en_US\"), \". So when you open the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/languages/\"), \" folder you will find a folder called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"en_US\"), \". This is where all the strings can be kept for your bot that can be easily translated by other translators.\"), mdx(\"h2\", null, \"Understanding The Folder Structure\"), mdx(\"p\", null, \"The first folder inside the languages folder must be a language folder following the name pattern like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"en_US\"), \". So for example, if we wanted to add a Spanish(Spain) language to our bot we would create a new folder called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"es_ES\"), \".\"), mdx(\"p\", null, \"You can have as many folder in here as you like. For example I can do something like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/languages/en_US/commands/fun/hug.json\"), \". Notice that I have created categories to help keep them categorized and easier to find. You can do it however you wish to have them. For now, just remember that files must always be \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".json\"), \" files in these folders. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"JSON is required.\")), mdx(\"h2\", null, \"Adding Hug Strings\"), mdx(\"p\", null, \"Earlier in the guide, we made a hug command. So let's make that commands translations work properly now.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"hug.json\"), \" file in the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"src/languages/en_US/commands/fun/\"), \" folder.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n    \\\"DESCRIPTION\\\": \\\"Hug yourself or another user.\\\"\\n}\\n\")), mdx(\"p\", null, \"Most of the time, you should start with this base. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DESCRIPTION\"), \" key, is used in the help command and provides the description for the command. When someone types \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"!help hug\"), \" they would see this description you typed.\"), mdx(\"p\", null, \"In our hug command we also had 2 other keys we used. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"SELF\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OTHER\"), \" so let's add those in.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n    \\\"DESCRIPTION\\\": \\\"Hug yourself or another user.\\\",\\n    \\\"SELF\\\": \\\"If you had no one to hug you could have hugged me. Years from now, when you're thinking about me, you're gonna say: 'How did I ever get along without that wonderful, constant companion?' *Woof.*\\\",\\n    \\\"OTHER\\\": \\\"{{user}} was hugged by {{mention}}\\\"\\n}\\n\")), mdx(\"p\", null, \"Now the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\\"SELF\\\"\"), \" is pretty easy to understand but the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"OTHER\"), \" has some interesting things in it so let's jump into that.\"), mdx(\"h2\", null, \"Translate Function\"), mdx(\"p\", null, \"Discordeno provides you a built in function called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"translate\"), \". It takes in 3 different arguments.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"guildID\"), \" the id of the server. This is used to determine which language to use.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"key\"), \" the unique folderpath:KEY string that will determine which string to translate.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"options\"), \" the variables that the strings have available to them.\")), mdx(\"p\", null, \"i18next allows you to pass in variables that you can use when you want in your strings. If you recall from our guide ealier we passed in 2 variables.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"translate(\\n    message.guildID,\\n    `commands/fun/${data.name}:${type}`,\\n    { mention: message.member()!.mention, user: member.mention },\\n)\\n\")), mdx(\"p\", null, \"Here we can see that we passed in:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"mention\"), \": The user mention who used this command. \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"!hug\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"user\"), \": The user mention of the member who was @ by the command author. \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"!hug @o'neill\"))), mdx(\"h2\", null, \"Variables\"), mdx(\"p\", null, \"Variables in i18next use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{{}}\"), \" format. So the variable \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mention\"), \" would be used by doing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{{mention}}\")), mdx(\"h2\", null, \"Key Rules\"), mdx(\"p\", null, \"When you create keys in the files there are a couple rules to follow.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Never use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \":\"), \" in your key name. \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"REQUIRED\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ALWAYS USE UPPERCASE \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"OPTIONAL\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Words are separated by \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"_\"), \" \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"OPTIONAL\"))), mdx(\"p\", null, \"The first one is the only one that is mandatory. The other two are recommended for you.\"), mdx(\"h2\", null, \"Missing Keys\"), mdx(\"p\", null, \"Every developer forgets stuff sometimes. When you forget to translate a key, it will be marked as a missing key and you will be alerted. If you provided a channelID in the configs file, you be be sent a message there and it will also be logged in your console.\"), mdx(\"h2\", null, \"Spanish Version\"), mdx(\"p\", null, \"Let's just create a spanish version of the hug command from above to see an example of different languages.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create a file called \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"hug.json\"), \" in the folder \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"src/languages/es_ES/commands/fun/\"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-json\"\n  }), \"{\\n    \\\"DESCRIPTION\\\": \\\"Abr\\xE1zate a ti mismo oa otro usuario\\\",\\n    \\\"SELF\\\": \\\"Si no tuvieras a nadie a quien abrazar, podr\\xEDas haberme abrazado. A\\xF1os a partir de ahora, cuando est\\xE9s pensando en m\\xED, dir\\xE1s: '\\xBFC\\xF3mo me las arregl\\xE9 sin esa maravillosa y constante compa\\xF1era?' *Guau.*\\\",\\n    \\\"OTHER\\\": \\\"{{user}} fue abrazado por {{mention}}\\\"\\n}\\n\")), mdx(\"p\", null, \"Notice, that there are 2 thing that were \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"NOT\"), \" translated. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"KEY\"), \" names and the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"VARIABLES\"), \". These 2 things should never be translated. Anything else can be translated upon your needs.\"), mdx(\"h2\", null, \"Localization Platform\"), mdx(\"p\", null, \"i18next works perfectly with localization platforms. For example, you can easily plug in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"crowdin\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"transifex\"), \" to your project.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://www.transifex.com/\"\n  }), \"Transifex\"), \" \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"This is the one I use in my bot but you can use anything you like.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"https://crowdin.com/\"\n  }), \"Crowdin\"))), mdx(\"h2\", null, \"Challenge\"), mdx(\"p\", null, \"Wow! You have even masted languages. Go ahead and jump back to the role command we made earlier and add translation support to it. Give it some love!\"), mdx(\"p\", null, \"Once you are ready, let's go make our first monitor.\"));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Creating Languages!\",\n  \"metaTitle\": \"Creating A Language | Discordeno\",\n  \"metaDescription\": \"Let's create our very own bot with Discordeno!\"\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`Woot! You have mastered Discordeno inhibitors already. Now it's time to finally make our bot multi-lingual. VÃ manos!`}</p>\n    <h2>{`What Is A Discordeno Language?`}</h2>\n    <p>{`A Discordeno language is a folder that will hold all our responses that the bot sends. By having various different language files you can have a multi-lingual bot that can be used in different languages.`}</p>\n    <h2>{`i18next`}</h2>\n    <p>{`By default, Discordeno comes built with support for i18next(one of if not the best localization libraries). If you want to learn more, go to `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.i18next.com/\"\n      }}>{`i18next website`}</a>{`. For now, there is probably not going to be anything you will need to learn there. As most of the functionality has already been created for you right here in Discordeno.`}</p>\n    <h2>{`Default Language`}</h2>\n    <p>{`The default language with Discordeno is American English which uses the name `}<inlineCode parentName=\"p\">{`en_US`}</inlineCode>{`. So when you open the `}<inlineCode parentName=\"p\">{`src/languages/`}</inlineCode>{` folder you will find a folder called `}<inlineCode parentName=\"p\">{`en_US`}</inlineCode>{`. This is where all the strings can be kept for your bot that can be easily translated by other translators.`}</p>\n    <h2>{`Understanding The Folder Structure`}</h2>\n    <p>{`The first folder inside the languages folder must be a language folder following the name pattern like `}<inlineCode parentName=\"p\">{`en_US`}</inlineCode>{`. So for example, if we wanted to add a Spanish(Spain) language to our bot we would create a new folder called `}<inlineCode parentName=\"p\">{`es_ES`}</inlineCode>{`.`}</p>\n    <p>{`You can have as many folder in here as you like. For example I can do something like `}<inlineCode parentName=\"p\">{`src/languages/en_US/commands/fun/hug.json`}</inlineCode>{`. Notice that I have created categories to help keep them categorized and easier to find. You can do it however you wish to have them. For now, just remember that files must always be `}<inlineCode parentName=\"p\">{`.json`}</inlineCode>{` files in these folders. `}<strong parentName=\"p\">{`JSON is required.`}</strong></p>\n    <h2>{`Adding Hug Strings`}</h2>\n    <p>{`Earlier in the guide, we made a hug command. So let's make that commands translations work properly now.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Create the `}<inlineCode parentName=\"li\">{`hug.json`}</inlineCode>{` file in the `}<inlineCode parentName=\"li\">{`src/languages/en_US/commands/fun/`}</inlineCode>{` folder.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"DESCRIPTION\": \"Hug yourself or another user.\"\n}\n`}</code></pre>\n    <p>{`Most of the time, you should start with this base. The `}<inlineCode parentName=\"p\">{`DESCRIPTION`}</inlineCode>{` key, is used in the help command and provides the description for the command. When someone types `}<inlineCode parentName=\"p\">{`!help hug`}</inlineCode>{` they would see this description you typed.`}</p>\n    <p>{`In our hug command we also had 2 other keys we used. `}<inlineCode parentName=\"p\">{`SELF`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`OTHER`}</inlineCode>{` so let's add those in.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"DESCRIPTION\": \"Hug yourself or another user.\",\n    \"SELF\": \"If you had no one to hug you could have hugged me. Years from now, when you're thinking about me, you're gonna say: 'How did I ever get along without that wonderful, constant companion?' *Woof.*\",\n    \"OTHER\": \"{{user}} was hugged by {{mention}}\"\n}\n`}</code></pre>\n    <p>{`Now the `}<inlineCode parentName=\"p\">{`\"SELF\"`}</inlineCode>{` is pretty easy to understand but the `}<inlineCode parentName=\"p\">{`OTHER`}</inlineCode>{` has some interesting things in it so let's jump into that.`}</p>\n    <h2>{`Translate Function`}</h2>\n    <p>{`Discordeno provides you a built in function called `}<inlineCode parentName=\"p\">{`translate`}</inlineCode>{`. It takes in 3 different arguments.`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`guildID`}</inlineCode>{` the id of the server. This is used to determine which language to use.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`key`}</inlineCode>{` the unique folderpath:KEY string that will determine which string to translate.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`options`}</inlineCode>{` the variables that the strings have available to them.`}</li>\n    </ul>\n    <p>{`i18next allows you to pass in variables that you can use when you want in your strings. If you recall from our guide ealier we passed in 2 variables.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`translate(\n    message.guildID,\n    \\`commands/fun/\\${data.name}:\\${type}\\`,\n    { mention: message.member()!.mention, user: member.mention },\n)\n`}</code></pre>\n    <p>{`Here we can see that we passed in:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`mention`}</inlineCode>{`: The user mention who used this command. `}<inlineCode parentName=\"li\">{`!hug`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`user`}</inlineCode>{`: The user mention of the member who was @ by the command author. `}<inlineCode parentName=\"li\">{`!hug @o'neill`}</inlineCode></li>\n    </ul>\n    <h2>{`Variables`}</h2>\n    <p>{`Variables in i18next use the `}<inlineCode parentName=\"p\">{`{{}}`}</inlineCode>{` format. So the variable `}<inlineCode parentName=\"p\">{`mention`}</inlineCode>{` would be used by doing `}<inlineCode parentName=\"p\">{`{{mention}}`}</inlineCode></p>\n    <h2>{`Key Rules`}</h2>\n    <p>{`When you create keys in the files there are a couple rules to follow.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Never use `}<inlineCode parentName=\"li\">{`:`}</inlineCode>{` in your key name. `}<strong parentName=\"li\">{`REQUIRED`}</strong></li>\n      <li parentName=\"ul\">{`ALWAYS USE UPPERCASE `}<strong parentName=\"li\">{`OPTIONAL`}</strong></li>\n      <li parentName=\"ul\">{`Words are separated by `}<inlineCode parentName=\"li\">{`_`}</inlineCode>{` `}<strong parentName=\"li\">{`OPTIONAL`}</strong></li>\n    </ul>\n    <p>{`The first one is the only one that is mandatory. The other two are recommended for you.`}</p>\n    <h2>{`Missing Keys`}</h2>\n    <p>{`Every developer forgets stuff sometimes. When you forget to translate a key, it will be marked as a missing key and you will be alerted. If you provided a channelID in the configs file, you be be sent a message there and it will also be logged in your console.`}</p>\n    <h2>{`Spanish Version`}</h2>\n    <p>{`Let's just create a spanish version of the hug command from above to see an example of different languages.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Create a file called `}<inlineCode parentName=\"li\">{`hug.json`}</inlineCode>{` in the folder `}<inlineCode parentName=\"li\">{`src/languages/es_ES/commands/fun/`}</inlineCode></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"DESCRIPTION\": \"AbrÃ¡zate a ti mismo oa otro usuario\",\n    \"SELF\": \"Si no tuvieras a nadie a quien abrazar, podrÃ­as haberme abrazado. AÃ±os a partir de ahora, cuando estÃ©s pensando en mÃ­, dirÃ¡s: 'Â¿CÃ³mo me las arreglÃ© sin esa maravillosa y constante compaÃ±era?' *Guau.*\",\n    \"OTHER\": \"{{user}} fue abrazado por {{mention}}\"\n}\n`}</code></pre>\n    <p>{`Notice, that there are 2 thing that were `}<strong parentName=\"p\">{`NOT`}</strong>{` translated. The `}<inlineCode parentName=\"p\">{`KEY`}</inlineCode>{` names and the `}<inlineCode parentName=\"p\">{`VARIABLES`}</inlineCode>{`. These 2 things should never be translated. Anything else can be translated upon your needs.`}</p>\n    <h2>{`Localization Platform`}</h2>\n    <p>{`i18next works perfectly with localization platforms. For example, you can easily plug in `}<inlineCode parentName=\"p\">{`crowdin`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`transifex`}</inlineCode>{` to your project.`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://www.transifex.com/\"\n        }}>{`Transifex`}</a>{` `}<em parentName=\"li\">{`This is the one I use in my bot but you can use anything you like.`}</em></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://crowdin.com/\"\n        }}>{`Crowdin`}</a></li>\n    </ul>\n    <h2>{`Challenge`}</h2>\n    <p>{`Wow! You have even masted languages. Go ahead and jump back to the role command we made earlier and add translation support to it. Give it some love!`}</p>\n    <p>{`Once you are ready, let's go make our first monitor.`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}